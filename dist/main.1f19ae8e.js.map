{"version":3,"sources":["../../src/config/theme.ts","../../src/shapes/Circle.ts","../../src/utils/getRandomColor.ts","../../src/tree/BinaryTreeNode.ts","../../src/tree/BinarySearchTreeNode.ts","../../src/tree/index.ts","../../src/utils/getRGBString.ts","../../src/helpers/ColorGenerator.ts","../../src/canvas/Canvas.ts","../../src/enumns/VisualizationType.ts","../../src/utils/tree.ts","../../src/strokes/BezierCurve.ts","../../src/utils/connectPointsWithBezierCurve.ts","../../src/canvas/drawPrettyBinaryTree.ts","../../src/canvas/drawExpandableBinaryTree.ts","../../src/canvas/drawSimpleBinaryTree.ts","../../src/canvas/drawBinaryTree.ts","../../src/canvas/index.ts","../../src/enumns/index.ts","../../src/config/index.ts","../src/index.ts","main.js"],"names":["_binaryTreeVisualizer","require","opt","textFont","strokeColor","borderStyle","colorArray","borderColor","bgColor","setTheme","insertBtn","document","querySelector","addEventListener","root","value","BinaryTreeNode","parseInt","getElementById","draw","insert","node","left","undefined","setLeft","right","setRight","deleteNode","minValue","minv","maxValue","maxv","searchNode","preorderArray","preorder","temp","push","inorderArray","inorder","postorderArray","postorder","preorderBtn","inorderBtn","postorderBtn","deleteBtn","querySelectorAll","isNaN","searchBtn","result","outputElement","remove","output_2","createElement","setAttribute","textnode","createTextNode","concat","appendChild","element","output_1","findMinBtn","findMaxBtn","min","output_3","max","output_4","resetBtn","outputElements","forEach","drawBinaryTree","type","VisualizationType","HIGHLIGHT"],"mappings":";;AqBAA,IAAAA,qBAAA,GAAAC,OAAA;AACA,IAAIC,GAAG,GAAG;EACNC,QAAQ,EAAC,GAAG;AFFhB,ADAA,AEAA,ECGIC,EFHJ,ADAA,AEAA,KAAA,CDAA,ECAA,CDAA,AEGe,EAAC,IDHhB,CDAA,EDAA,AGGuB,GHHvB,OAAA;AVAA,AQCA,AFAA,ADAA,AECA,AIFA,AVAA,ASAA,AXAA,ANCA,AUCA,APFA,ADAA,ASCA,ANDA,AJCA,AkBDA,ECIIC,EbJJ,AQCA,AFAA,ADAA,AECA,ANFY,AFAZ,ANCA,AGDA,ADAA,ASCA,AVAA,EiBDA,ADAA,AEAA,CDAA,ADAA,AEAA,GNCA,ADAA,AECA,AdDA,AWAA,AVAA,CiBDA,ADAA,AfAA,AiBAA,CDAA,ADAA,AEAA,CNCA,ADAA,AECA,AdDA,AWAA,AVAA,AmBGe,ClBJf,CkBIgB,EdJhB,AaAA,CDAA,CXAA,AJAA,AgBAA,CDAA,AZAA,CEKC,CDLD,AQCA,AZDA,CiBIwB,ELHxB,CIDA,CDAA,GDAA,EFCA,AEDA,GJCA,ADAA,AECA,AdDA,AWAA,AVAA,CYAA,ADAA,AECA,AdDA,AEDA,ASCA,AVAA,CCDA,AiBAA,CDAA,CDAA,CEAA,CDAA,CZAA,COCA,ADAA,AECA,ARFA,ANCA,AWAA,AVAA,CMDA,AJAA,ADAA,CKAA,AJAA,KcAA,AXAA,ECAA,AJAA,CcAA;AVCA,AQCA,AFEA,ADAA,AEDA,AfDA,ASFA,AFAiD,ANCb,AGDU,ADC9C,ASCA,AVDoC,CODpC,CUAA,ADAA,AEAA,ACKIC,EbJJ,AQCA,AFEA,ADAA,AEDA,AZFA,ASCA,EOFA,AnBEM,AkBFN,AEAA,GNIA,ADAA,AEDA,AIHA,ADAA,AXAiD,ANCb,AGDU,AFCV,AkBDpC,CjBCA,CHCW,ASFC,CKIZ,ADAA,AEDA,AMEc,ClBJd,CHCqB,AqBGL,CAAC,CTHjB,CJDA,EMGA,ADAA,AEDA,AHDA,CJDA,KQCA,EGFA,ADAA,AEAA,CJEA,APF6B,EUA7B,AVA6B,ASA7B,AEAA,EbAiD,ANCb,AGDU,AFCV,CKDa,ANCb,AGDU,AFCV,ECApC,CAAA,KSCA,CJDA,AICA,CJDA,ALAA,CIDiD,ANCb,AGDU,AFCV,CKDa,ANCb,AGDU,AFCV,IKDa,ANCb,AGDU,AQE9C,AVDoC,CMApC,AQCA,ATFiD,ANCb,AGDU,AFCV,CcCpC,ATFiD,ANCb,AGDU,AFCV,OcCpC,GTFiD,ANCb,AGDU,AFCV,GKDa,ANCb,AGDU,AFCV,CKDa,ANCb,AGDU,AFCV,KKDa,ANCb,AGDU,AFCV,OKDa,ANCb,AGDU,AFCV,EKDa,ANCb,AGDU,AFCV,CKDa,ANCb,AGDU,AFCV;AMAa,AQEjD,AFOA,ADDA,AEGA,ARVA,ANGA,AGHA,ADAA,ASAiD,AVCjD,EiBHA,AnBGE,ASFA,ASDF,AEAA,EJGA,AFOA,ADDA,AEGA,AZVA,AkBIQC,EFNR,ADAA,AEAA,EpBGQ,CQFyC,AWDjD,ADAA,ANEiD,AQFjD,CpBGU,EAAE,CmBHZ,ADAA,AEAA,ECMmB,EAAE,EZLnB,ANCF,CgBFA,AVCE,ASDF,AEAA,EjBEA,EgBFA,ADAA,AEAA,ACM4B,KLH5B,EGHA,ADAA,AEAA,CZCiD,AQEjD,AGHA,ADAA,ANEiD,AQFjD,CZCiD,AMSjD,ADDA,AEGA,AHViD,EOFjD,ADAA,AEAA,CNUA,ADDA,AEGA,CNXE,CAAA,GUDF,ADAA,AEAA,GZCiD,ALCjD,ASAiD,CJDA,ALCjD,ASAiD,CHD/C,AWDF,CDAA,AVCE,AWDF,CDAA,CXCiD,AICA,CJDA,ACA/C,AGC+C,AQFjD,CZCiD,AWDjD,AVCE,AGC+C,CHD/C,ANCF,EaCA,CAAA,APFE,GKSF,ADDA,AEGA,CDFA,ADDA,AEGA,AGZA,CAAA,CVCiD,AICA,CICjD,CPFQ,ASDR,CVCiD,AICA,CJDA,AICA,CEQjD,ADDA,AEGA,IPXiD,AICA,OJDA,AICA,EJDA,AICA,CJDA,AICA;AJEjD,AQAA,AFO+C,ADDA,AEGA,AJR/C,ARHqD,ASMrD,EORA,AnBIE,ASFA,ASFF,AEAA,EJIA,AKGQC,EVFF,EQLN,ADAA,AEAA,CNW+C,ADDA,AEGA,AIb/C,ADAA,AfEqD,AiBFrD,ECOe,EAAE,IVFA,CAAA,CFHf,CAAA,ETEoB,CmBJtB,ADAA,AEAA,CDAA,AnBIwB,AkBJxB,AEAA,CJIA,GAAA,AhBA4B,GmBJ5B,ADAA,AEAA,CNW+C,ADDA,AEGA,AZXM,CWSN,ADDA,AEGA,AIb/C,ADAA,AfEqD,AiBFrD,GDAA,ADAA,AEAA,CXEE,CAAA,MKS6C,ADDA,AEGA,AZXM,CWSN,ADDA,AEGA,AZXM,CMAnD,CAAA,EKS6C,ADDA,AEGA,AZXM,CaErD,AFO+C,ADDA,AEGA,ANX7C,ANAmD,CaErD,AFO+C,ADDA,AEGA,ANX7C,ANAmD,CMAnD,GAAA,GOEF,GFO+C,ADDA,AEGA,AZXM,EMA7C,CKSuC,ADDA,AEGA,AZXM,CWSN,ADDA,AEGA,AZXM,KWSN,ADDA,AEGA,AZXM,OWSN,ADDA,AEGA,AZXM,EWSN,ADDA,AEGA,AZXM,CWSN,ADDA,AEGA,AZXM;AaIrD,AFOA,ADGA,AEDA,AZXA,AOJA,EVKE,ASFA,AEwBA,AUnBE,CAAC,CLFL,AGNA,ADAA,ARAA,AUAA,MVAA,CMMA,ENNA,CMMA,AGNA,ADAA,AEAA,CpBKe,EAAE,EAAE,ASFjB,CAAA,eCHF,CMMA,ANNA,CMMA,APHE,CAAA,KCHF,CMMA,MPHE,CAAA,GAAA,CAAA,CAAA,GAAA,YAAU;AOG2B,ATDvC,ANGA,AGHA,AMLoC,AWSpC,CAAC,CrBHC,ASFA,EUJF,ADAA,AEAA,EbKM,ANGA,AGHA,CeLN,ADAA,AEAA,EJMuC,ATD9B,AGL2B,GVMxB,AODA,EPCE,AODA,EPCE,ACEA,EkBRhB,ADAA,AEAA,CDAA,AVIE,ASJF,AjBQmB,AmBRnB,CXIE,ERIoB,IGFpB,MYAqC,ANNH,CMMG,ANNH,ENM1B,EKFR,CAAA,MOEqC,ANNH,CMMG,ANNH,IMMG,APFrC,ACJkC,CMMG,APFrC,ACJkC,CMMG,ANNH,EDIlC,CAAA,CAAA,GAAA,ALEyB,CAAA,EYAY,ANNH,GMMG,ANNH,CMMG,ANNH,IDIzB,COE4B,ANNH,OMMG,ANNH,EMMG,ANNH,CMMG,ANNH;AFOpC,AQCA,APHA,AFEA,ANGA,ASRA,AWQA,CZLC,CTEC,AIUE,CKjBQ,CYUZC,EbHM,AWPN,ADAA,AEAA,IpBOU,EAAE,CmBPZ,ADAA,AEAA,CpBOc,IoBPd,CDAA,ACAA,CDAA,AVA6B,CDOR,CAAA,AYPrB,CDAA,EVA6B,MSA7B,CTA6B,ASA7B,CTA6B,CYUrB,CHVR,CGUSP,GAAG,CAAC,UZVgB,GAAjB,iBAAiB,GAAA,CAAA,CAAA,CAAA,CAAA;AOS7B,AFOA,ADGA,AVZA,ADCA,AmBGA,EbmCE,ARtCA,EcQE,ADGA,AMnBJ,ADAA,AEAA,ACWMQ,ELFA,AbFA,GDCG,CFAC,EAAE,CqBGG,ELFA,CKEGC,ELFyC,EFO/B,ADGA,AVZR,CHCC,AGDD,CaE2C,CdDxC,CAAA,AmBGG,CLFwC,AKEvCC,CLFuC,AdD3C,CcC6C,WKE5B,CAAC,QAAQ,CAAC;ALAlD,AFOA,ADGA,APbA,AeIAF,EFZA,AnBSE,AkBTF,Af4BE,ADnBA,AkBTF,MlBSQ,CIDC,AeIA,CAACG,GrBHG,EAAE,MMDM,CAAC,ENCE,CMDS,CeIP,CfJS,AeIR,KfJqB,EAAE,AeIhB,EAAE,EfJ0B,EAAA,QeItB;AFZxC,ADAA,AXUA,ANGA,AmBbA,EpBUE,AMDA,AeIE,EnBJK,EKCH,ANGA,AoBACC,GfJE,CeIE,CAACC,CrBHA,ACGA,CAAA,CDHE,CACV,CMFY,AeIC,GfJE,CCCC,AcGD,CdHC,EcGE,CfJE,CeID,IfJM,KAAK,IAAI,GAAG;AMMzC,ANLA,AcTA,EbSA,ANkCE,ACnCiB,CAAC,CFEf,AoBVL,ACaQD,EnBLe,EmBKX,CTCH,EZJG,AoBVZ,ACae,ErBHD,AODd,CAAA,AaTA,CCamBE,CdJnB,ILD4B,CkBR5B,CpBUuB,eYIc,CACjC,aSF6B,CAACC,CTEE,EAChC,KSHsC,CAACN,QAAQ,CAACO,CTGJ,EAC5C,WSJ8D,CAAC,ETIvB,EAAA,KSJgC,CAAC,CAACH,KAAK,CAAC,CAAC;APOrF,ADGA,AIxBA,AZAA,ACUC,AcTD,EhBqBI,AQFJ,AVVE,EYWE,ADGA,AIxBJ,AjBWyB,AOAvB,AFXF,ACUC,AeKOI,EDdR,CAAA,CCcY,CjBOD,AFZF,AmBKI,CjBOD,AiBPE,CJfd,AGCA,CdSC,AcTD,EHDA,CjBWoC,AIWM,AEZzC,ENCqC,AIWI,CSEhB,CCHI,ATrB9B,AHUmB,AkBTnB,ClBSoB,CkBTpB,CfDA,ACUC,CAAA,CJAuB,CAAC,GkBTzB,EdSC,AJA6B,CAAC,EIEhB,EJFoB,CeVnC,AfUoC,CeVpC,EGCA,GlBS0C,AkBT1C,ClBS0C,CeV1C,AZAA,AHU4C,CGV5C,ACY2B,EJFoB,KGV/C,KHUyD,CAAC,MAAM,CAAC,CAAC;AYalE,ADGA,AEHA,AEtBA,AZAA,AHUA,AQHM,EF2CJ,ARxC6C,AYU7C,AQpBF,ACeI,CrBL4C,AqBK3C,CJfL,AbsBM,ACtBN,EeAA,ERoBQ,CGEC,AXAE,AMfK,AUPhB,ACgBQ,CjBMI,GI4BV,CAAY,GAAsB,AJ5BjB,CAAC,CI4BgB,ASlDpC,GAAA,CbsByB,CAAC,CCtB1B,EeAA,CfAA,CUsB6B,CACzB,AKvBJ,ILuByC,ALhBA,CAAC,CKiBtC,QExBJ,CAAA,APO4D,EAAA,GLP5D,CUwBoC,AVxBpC,CYAA,CFyBI,KVzBJ,MUyBuB,EACnB,gBAA4C,EAAA;AE1BF,AZAY,AHUzD,CFEA,CegBC,AJOA,APZE,ADSF,AOxBA,AURF,EZ8BE,AIVO,AVVR,AmBOOC,EDjBR,GHA8C,AZAY,AKQjD,AURT,CRoBe,ASHD,CAACN,CnBPd,CSyBC,ARHA,AOxBO,AURT,CToCM,ARJQ,AOxBL,CRER,AmBOkB,EXTV,AWSWG,CXTX,CC4BU,ARJG,AOxBZ,CURV,CTqCM,ARLgB,AOxBP,CREd,CAAA,CkBVD,CCiB4B,CVoBV,AUpBWN,EVqBvB,ET5BL,CS4Be,AD9BS,AURzB,CHA8C,AZAY,AeA1D,CHA8C,ANuCxC,ANvCoD,AHY3C,CQJW,AWSW,CXTT,AUR5B,ACiBsCO,CVsBtB,AD/BY,ECgCtB,GAAU,ASxChB,ETwCgB,CMxC8B,AZAY,CYAZ,AZAY,EHY7B,CkBZ7B,CHA8C,AZAY,AeA1D,ACiBoD,CJjBN,AZAY,AgBiBL,CJjBP,AZAY,CeA1D,OCiB8D,CAAC,CJjBjB,AZAY,AgBiBMH,GJjBlB,AZAY,CYAZ,AZAY,CgBiBW,CAAC,CAAC,EJjBzB,AZAY,OYAZ,AZAY,EYAZ,AZAY,CYAZ,AZAY;ALc1D,AULA,EKoBE,AXJE,AgBzBJ,EbaU,AI6BN,ARTA,ASba,ASFTI,INWA,ARhBE,AJoBF,AiBjCR,ACkBY,CdLF,AJoBD,AiBjCT,ACkBa,CVwBH,AUxBI,EdLD,EJoBC,CIpBE,CAAC,CJoBA,KAAK,CiBjCtB,CAAA,OAAA,EAAA,GAAA;AJiBA,AFQA,ADGA,AHjBA,EESqB,ASDjB,CTCkB,CEKlB,ADGA,AECK,ARdP,AJmBE,AiBlCJ,ET0CW,ACtBc,CDsBb,CRRJ,CajBC,ALyBK,ARRL,CYLM,IFD0D,AO5BzE,CT0CoB,GGjBM,CXSP,GAAG,ASdmB,CIHlB,CACnB,EbgBsB,EahBe,EACrC,Wbe4B,CACxB,CahB4B,EAChC,AbeO,KAAK,EafZ,Abec,EACV,CahBiC,CAAA,CAAE,EAAA,SbgB9B,CAAC,MAAM,EACZ,IAAA,uBAAc,EAAA,CAAE,CACnB;AWXL,ADGA,AQVA,CAAC,CLEC,AbiBA,ASlBA,ASDA,EbaQ,AOJO,AK7BjB,ET0CsB,CAAC,AS1CvB,CZiCU,AQXF,AJDA,CJYE,AGSe,SS1CzB,CAAA,UZiC8B,GAAW,EAAE;AaZ3C,ENQqB,AdqBnB,AETA,CYZoB,CPsBlB,AQ5BA,ALmB2B,ACrBtB,CDqBuB,CIbP,AK7BzB,EJuBQ,ALmB2B,CUrB1BC,Cb8BC,AI9BK,CIEJ,Ef2BT,AURsC,AS1CxC,CnBmDM,CoB9BSA,Cb8BC,Aa9BAC,Gb8BG,APAA,CmBnDnB,ACqBoB,CpB+Bd,AmBpDN,CL6ByC,AMRnBN,EDrBtB,GZmD2B,APCP,AoB/BO,Cb8BC,CPEtB,AoBhCsB,Yb8Ba,CAAC,APEF,EAAA,Ge9BZ,CAAC,ER4BqB,CAAC,GQ5BhB;EDOjC,AMRE,Eb+BA,AQ7BA,ATNM,ANAR,AUyBE,ACtBa,AQrBjB,ECsBOM,Eb+BC,AOvBA,ARZE,CCmCD,ADnCC,CIyBA,AUrBC,CAACN,Cb+BA,CQ7BC,CTNE,CCmCA,CQ7BC,AKFC,CNQA,ARZC,CCmCA,ADnCC,EQYC,AMRDA,CNQE,CCNC,CAAC,EKFC,ENQG,AMPnB,GNOsB,ICNI,ADMA,IAAI,CAAC;ADAvC,AdXM,EeaJ,AXFE,AQTiB,AQrBrB,ACwBI,CTHkB,CJiClB,AQ7BA,AFKA,APVF,EIuBS,ACtBc,ASGlBA,CVmBK,CHWJ,CAAC,ARnCO,AWwBF,CPbF,CAAC,AiBND,CLCA,CLkBM,CUnBLM,Cb8BE,AQ7BA,CZK4B,CJXnB,CQmCN,ARnCO,AIWkB,AiBN1B,CAACN,CPME,AFTmB,CIIlB,CAAC,CFKyB,CNwBvB,Aa9BD,EAAC,CPM2B,GAAG,CAAA,CAAE,EdXC,EAAA;AcazD,AMhCA,EJyBgC,ADQ9B,AfbA,AYEA,CIIC,CR6BC,AJxBE,AiBNE,ELCF,ALiBc,CAAC,CHYb,AOtBA,AfbA,AYEA,ASGGM,Cb8BF,AGZc,APZZ,CAAC,EiBNG,CLCF,AJJA,ASGGC,GTHA,CGWC,AHXA,ASGG,CjBMA,CAAC,CWED,CMREC,Eb8BC,AIjCA,CRSG,CAAC,CIwBD,AIjCA,IJiCI,AIjCA,ASGC,CNQA,CMRC,ENQE,AHXA,CAAC,aGWI,CAAC,IPsBI,CAAA,CAAE,IOtBI;ALhB5C,AUhBN,EZuDE,AQ5BA,ADOA,AXHE,AQTF,EZFE,ACAM,AUsBiB,AS1C3B,CT0C4B,CUjBhBH,ELEJ,AfPE,AUsBqB,ACpBvB,CXFE,ASJM,CVIN,CWsBwB,AS1ClC,CCyBkB,CrBLL,AYEA,ASGMC,CDzBnB,EnBoBiB,AWED,CAAC,ASGM,CrBLL,AqBKMC,CrBLL,ACAS,EAAE,AmBpB9B,CCyB4B,CLEL,AJLA,CSGMP,CrBLJ,CgBOC,AJLA,GSGQ,CTHJ,ASGK,ITHD,CIKC,AJLA,CIKC,GAAG,CAAC,CNXQ,CAAC,QAAgB,EAAA,CMWZ,CAAC,IACpD,IAAI,eAAe,CAAC,aAAa,CAAC;AI5BpC,EZyDE,AQ5BA,ADMA,AXFE,ADYF,ASrBA,AFPA,EVIE,AOCM,ANUR,AUWE,EIRE,AKnCN,AC0BY,CNSL,AKnCP,CbsBU,CAAA,AJuBD,AO5BA,CC0BC,AREA,AO5BA,CMYC,AI7BX,CJ6BY,AI7BZ,CbsBc,ESOC,AbgBmB,CahBlB,ATPC,CQaA,ARbC,AJuBgB,CYVhB,ALlBA,CUjBlB,EViBqB,AUjBrB,CViBsB,EVIE,EUJE,CVIC,CoBrB3B,CJ6B6B,EAAE,CDMC,AfdA,CecC,AfdA,MoBrBjC,CViB+B,CAAC,CKkBU,AKnC1C,ELmC4C,ECNE,CAAC,MDMM,AfdA,CecC,ALlBT;AAC7C,EMaE,ADKA,ARmBF,AK9BE,AQzBF,EpBsBI,AGwBA,AkBnBI,ENSF,AJOK,AS3CX,CLoCO,AJOK,CRGJ,ASrBA,CDkBM,ARGL,AiB9CT,CJ+BU,GLYQ,ARGL,CafC,EbeE,CYVC,AfdA,CecC,EfdE,AYGA,CTqBC,CYVC,CAAC,AHXA,EZHE,CAAC,CYGC,AQzB3B,GAAA,QLoCsC,CAAC,AfdA,QYGD,CAChC,cAAK,CAAC,WAAW,EACjB;ACUN,AHjBA,EKmBE,ARfA,AJuBA,AiB/CF,EJgCI,AhBTA,AYIG,ASCCM,CTDA,CDgBY,AS3CpB,CT2CqB,AChBX,CSCE,CLIH,AHKA,AFMc,AS3CvB,AC4BaG,ITDG,AQ3BhB,CpBuBc,EqBKM,CrBLH,AqBKI,GD5BrB,CC4ByBR,CrBLH,CAAC,CoBvBvB,MPqC8B,CAC1B,AOtCJ,CAAA,CpBuBiC,EaeQ,AOtCzC,EPuCI,IOvCJ,IJgC0B,CAAC,EIhC3B,CAAA,GJgCiC,AHOG,AOvCpC,EPwCI,GQZmC,CAACD,IRYrB,CQZ0B,CRazC,AQb0C,CAAC,YRarB,EAAA;ELmBxB,AKjBA,AEHA,AZSA,AiBjDF,EpBwBI,ACWM,AUQiB,AChBT,ASEV,CVcoB,AChBT,CIMb,CJNe,CXQX,AUQqB,AS3C/B,CnBmCU,AmBnCV,CJiCM,AfEK,CUQuB,EHiBrB,APzBS,COyBT,ARpCC,ACWS,CAAC,COyBX,CRpCI,KAAK,CAAC,AoBxBvB,CAAA,OAAA,EpBwBiC,AoBxBjC,GAAA,GJiC0B,EAAC,IAAI,EAAE,eAAe,EAAE;EHWhD,AEHA,AHdyB,ASGvB,CTHwB,CJkCxB,ARpCA,ACYF,AUOE,AS5CJ,CR4BM,CCgBA,AEHA,ECPE,ER2BE,AOpBA,AJGA,CIHC,CfhBC,EoBzBZ,CLyCe,AfhBA,EgBSE,ADOA,GfhBG,CAAC,CamBC,EAAE,KbnBK;Aca7B,EOPQ,ERcJ,AEHA,AfhBA,AYEG,AQ5BP,CR4BQ,CJiCG,AGjBA,AUbAM,CVaC,AChBF,AQ5BV,CJmCQ,CFGC,AHMK,CUbC,CAACI,Cb8BC,AIjCF,CDgBG,EXlBH,CqBKM,ErBLH,AoB1BlB,CAAA,CC+BuBF,GrBLA,CamBC,AEHA,AfhBA,CamBC,AEHA,IAAI,AMXG,CPOF,ACIA,CDH1B,AOR6B,GNWC,CDHO,AdbN,CegBC,CDFhC,IAAqB,ADKgB,CAAC,CCJtC,OAA+B,CCCgB,CDDhB,CCCkB,WAAW,GAAC,CAAC,EAAE;EDClE,AVJE,EJZA,AYCa,ASILH,CTJM,CJiCC,AOlBb,AJCc,AS5CpB,CJoCO,ALQc,AChBD,CIQZ,AZGE,COKa,APLZ,CiBPO,CAACC,CNWP,AfhBA,CoB3BZ,ChBuCmB,CJZJ,AqBKQ,CjBOJ,AiBPKI,IrBLJ,AoB3BpB,CpB2BqB,AoB3BrB,ACgC6B,EAACV,CDhC9B,ICgCmC,CAAC;EPYlC,ADIA,AbrB2B,AOE3B,AKDuB,CZAtB,AYAuB,CJiCF,APrBd,AUIiB,APJrB,AgBxCN,ACiCY,Cb4Ba,AGjBG,ACftB,CIQA,AFOA,ACAA,AfhBA,EQiCsB,APrBlB,AUIqB,CVJrB,CcIA,AdJC,CUIuB,CHiBF,AOjBpB,CPiBqB,APrBX,CAAC,CAAC,COqBY,ADhCpB,CAAC,KOeK,AdhBA,AOC0B,EOexB,APfwB;AGH1C,EGuBJ,AbnBA,AGwBA,AiBtDF,ACkCQ,Eb4BJ,AQvBA,AFMA,APfA,ANwBA,AURA,APLE,AQZC,CGgBF,AHhBG,CGgBF,CffC,AYDG,CJiCF,ARhCA,AOAA,ANwBA,AURA,APLE,CIqBD,AQvBA,ATTA,ANwBA,AURA,ADpBO,CP4BN,CAAC,ASzBG,ERYC,CJXD,AOAA,ANwBA,AURA,CJhBC,CJwBoB,CHxBlB,ACwBA,AURA,CEGC,ANnBA,AHWE,ADae,CKQhB,ADhCA,CCgCA,CAAE,AKbA,CLaC,APRA,AURA,APLE,CJXD,AOAA,AHWE,CUID,APfA,COeC,EDIE,CAAC,ATRE,CGXD,CAAC,AHWE,CIqBD,CAAC,CAAC,ADhCA,ECgCE,CAAC,ADhCA,ECgCE,EDhCE,COeC,CAAC,CNiBC,ADhCA,ECgCE,AQvBnB,CAAC,GHUsB,CAAC,CLaC,CAAC,AEpCO,CAAC,GMavB,AHUkB,EHvBkB,EAAA;AU1BzE,EZ+DE,ARhCA,AOAA,AGJA,AWQMM,EReJ,AEJA,AdSA,AURA,ARQA,AS1BY,CAAC,CIWX,AZEE,AiBPI,CrBJL,AYFY,ASMNK,CNWT,AffI,ACwBA,AURA,ARQA,CFAC,AURA,ARQA,AO5BC,CMaJ,IbeQ,AO5BC,CCoBA,AUZM,CAAC,ClBoBL,AO5BE,CCoBD,CEGC,CAAC,AQfMV,EpBoBJ,AEAA,EQRE,CVQC,GDxBG,GamBG,AbnBA,AUJP,CGuBO,AHvBN,CGuBQ,KZKK,KefR,EAAC,ADMC,ALnBM,EKmBL,ECNE,EAAE,AhBTc,KqBIX,CAACD,KNWO,AMXF,CAAC,CNWG,AMXF,ELKI,EAAE;ANZtD,AU3BA,ACmCA,Eb6BE,AMjBA,AdhBA,AOCA,AJuBA,AS3BsB,CAAC,CCsBrB,AZKA,AURA,AS/CJ,CR6BM,CGiBA,CffC,CgBSC,AhBTA,ACwBA,AURA,CVQC,AURA,CEGC,COlDV,CL8CY,EAAE,AK9Cd,CT+Ce,EKPE,CLOC,GXhBG,AoB/BrB,EL8CuB,AdSA,CYLC,AbnBA,AWgBA,EVQE,CYLC,UbnBU,UamBU,CACvC,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,aAAa,CAAC;AHtBvD,AU7BA,ACqCA,EPWE,AdhBA,AGyBA,EULE,AFJA,APJE,AQfC,CAAC,CGkBF,AdSA,AmBxDN,CpBgCO,AYHG,AQ7BV,CJyCQ,AHWA,AbpBA,AWgBA,CAAC,AUXAY,CNUC,CHlBI,AQ7Bd,CL+CY,AK/CZ,CL+Ca,AJCA,GAAG,EGAE,AdhBA,CeeC,AdSA,AmBxDnB,ACqCmBA,CVWC,AUXAN,CPWC,AdhBA,ACwBA,AmBxDrB,CPoDsB,AELA,EFKE,AQfA,EAAEN,CPWC,AbQA,CaRC,AMhD5B,GL+C+B,AffA,AqBKA,EAAE,ENUE,IK/CnC,GAAA,ONgDiD,CAC3C,MAAM,gBAAgB,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAC9C;AACH,EdlBE,AoBjCF,ACsCI,EVWA,APJE,AQhBU,CGmBX,AHnBY,CCwBX,AZIA,AmBzDN,ACsCQM,CLID,ADMA,AffA,AYJY,CIaX,AhBTA,AWgBA,APJE,COID,ASjDT,CCsCY,GVWC,APJE,CiBPCE,EVWA,APJE,EJZA,ECwBE,AURA,APJE,CJZD,AIYE,CHYD,CoBnBG,EAAE,CjBOC,CSQD,AOrD3B,CPqD4B,AZIA,AGZE,EgB7C9B,CpBiC+B,CaoBC,AQfEF,EReA,EQfI,aReW,EAAE,QAAQ,EAAE,aAAa,CAAC;ACC3E,EdpBE,AYLqB,AQ7BvB,ACuCI,CTVoB,CDqBpB,ACpBD,EIaG,ADMA,AdSA,AGZE,AgB9CR,ACuCQN,CrBLD,CAAC,AWgBA,CAAC,ASlDT,ChB8CY,CiBPC,CNUD,CJCC,ASlDb,CLiDc,AXHE,AiBPAM,CpBmBD,AGZE,CJZD,AWgBA,CVQC,CoBnBG,CrBLD,AIYE,AiBPAN,CVWD,ASlDpB,ChB8CuB,EWGA,AdSA,CmB1DvB,ACuC0B,ENUA,AdSA,AoBnBE,CrBLD,IoBlC3B,CAAA,GAAA,KLiD+B,AdSA,CcTC,AdSA,AmB1DhC,MLiDsC,CKjDtC,CAAA,GAAA,SnB0DoD;EYHlD,AbpBA,AYJA,AQ/BF,CPuDG,CGVC,AHUA,AFJA,AUXIM,ENUF,AdSA,CDxBC,CAAC,AWgBA,APJE,AgB/CV,ACwCY,CLKH,ALMA,ASnDT,ACwCaC,CNUH,EAAE,AXHE,COID,APJE,AiBPE,CTTH,CX4BC,AW5BA,CGmBH,AJCI,AUXIK,CpBmBH,AGZE,CAAC,CJZD,AYJA,CDoBC,ACpBA,EZIE,CCwBC,AmB3DvB,ChB+C0B,AgB/C1B,ChB+C2B,CHYD,AoBnBI,CAACN,GjBOC,CAAC,AgB/CjC,ACwCmC,CAACC,CrBLH,AoBnCjC,ER+BmC,CAAC,AQ/BpC,ACwCwC,EAAEP,EpBmBX,CAAC,EoBnBe,CAAC,CLKtB,CAAC,AJdmB,CAAA,CAAE,CAAC,EGmBR,EAAC,ECLN,SDKiB,GAAG,CAAC,CAAC,GAAG,cAAK,CAAC;AFMnE,ADxBA,EZIE,AqBKE,CAAC,CVWD,ASpDJ,CLmDK,AdSA,CedC,ADKA,CffC,CAAC,AWgBA,APJE,COID,AUXE,CLKL,GLMO,AUXEA,CDzCf,EpBoCgB,AWgBA,EUXI,CrBLD,CWgBC,CUXGM,IAAI,CAACN,CrBLD,IqBKM,EAAE,MLKT,EAAC,IAAI,EAAE,eAAe,EAAE;AHYlD,AbrBA,AYLC,EJsCC,ADhCA,ANuBA,EURE,ACrBH,AQhCD,AC0CQM,GD1CR,CJ+CQ,ALMA,AUXI,CVWH,AUXII,GTVZ,CDqBY,CJfC,AcII,CdJJ,AKNb,CDqBe,CKNC,ATTH,AcIOE,CD1CrB,CAAA,CTqDoB,EHiBE,AItCrB,CJsCsB,AItCtB,ISU8B,CAACN,Cb4BK,CItCpC,CJsCsC,Ca5BH,CTRrB,ASQsBI,Gb4Be,EAAA,Aa5BV,EAAEV,KAAK,CAAC,eTRP;AZG1C,AUFK,EKmBJ,AdSA,AUTA,ARSA,AkBpBE,CAAC,Cb4BD,ARlCH,AOEG,EQeE,AXJE,AgBlDR,EZuEQ,AQvBA,CRuBC,AEpCO,AWQL,CNWD,AXJE,CWID,AXJE,ADaF,CH1BV,AG0BU,CiB/DX,CjB+DW,CKQI,ARlCd,CQkCe,AQvBA,ADMA,EAAE,AXJE,CAAC,CgBlDrB,CAAA,CZuEsB,ARlCrB,CAAA,AIawB,CgBlDzB,CZuEyB,IAAI,CAAC,ARlC7B,GQkCgC,ARhClB,CQgCmB,IRhCd,AUJyB,CAAC,CFoCN,GAAG,AJrBE,CAAC,KIqBG,AJrBE,AMfa,CNeZ,CAAC,AMfW;AIwBhE,EHHE,ADpBA,EFoCE,AOjBA,ARfA,AaxCJ,AC4CQ,EjBOA,EIqBA,AQvBA,AKLIM,Cb4BH,AMbA,AJvBC,CHIA,EcIM,CAACC,Eb4BF,ADhCA,CCgCC,Ca5BK,CdJH,CGJE,EFoCC,AQvBA,AKLIC,CdJP,AGJM,CMaD,CRuBC,AOjBA,CAAC,GPiBG,CAAC,AOjBA,CAAC,AMXI,Eb4BF,Aa5BI,Cb4BH,EOjBE,CLnBN,CKmBQ,ALnBP,CFoCQ,Ca5BKF,Eb4BF,AMbA,CAAA,CPnBX,AcIiB,CPeN,AOfOI,CdJjB,CCgCe,CEpCN,EHIL,AcIkB,CdJjB,AcIkB,ENWF,CRfb,CQee,CRfb,AcK5B,IdLgC,AcK5BJ,CdL6B,GcKzB,CAACI,CNU2C,ARfd,EAAE,CQea,CAAC,AMVxC,ENU0C,ARfZ,CAAC,CcK3BF,GdL+B,CAAC,KcKvB,EAAE,OAAOF,IAAI,CAACC,IAAI;AXR1D,EFoCE,AMbA,AM5DF,Eb0CI,AJsBA,AkBjBID,ENSF,CCNC,CAAC,AKHI,CPaH,AObIN,ClBiBH,EYRE,EAAE,AMTI,GAAGa,GlBiBD,GYRG,AZQA,CWJC,AXID,CWJE,AXIF,AkBjBM,CAACP,ClBiBP,GAAA,AkBjBW,CPaH,AObII,GPaD,AXIP,CWJQ,AXIP,CkBjBY,CAAC,ElBiBT,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,CAAA,CAAE,KAAI,CAAC;AWHlD,AJtBA,AUvCA,EZ2EE,EDhCE,AHWE,ADWF,AkBjBIJ,ELGF,ADMA,ERdE,AcKI,CdLH,AcKII,ClBiBH,IkBjBQ,GAAGE,IlBiBA,EItBE,CAAC,AJsBA,CAAA,CAAA,CkBjBO,ClBiBP,AkBjBQN,EdLF,CAAC,AJsBP,CkBjBY,CAACI,ElBiBT,CAAC,EkBjBa,EAAEJ,ClBiBV,GkBjBc,CAACN,ElBiBf,GkBjBoB,ClBiBpB,AkBjBqB,IlBiBrB,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,SAAS,CAAA,CAAE,KAAI,CAAC;AWDpD,EOfI,ELIA,ATTA,AHWE,ADWF,CYRC,CAAC,ERdE,AHWE,GDWC,CItBC,AHWE,CGXD,AHWE,EDWA,CAAC,CItBC,CHWG,CDWD,CItBC,AHWE,ADWF,GItBG,EAAE,KJsBK,EAAE,WAAW,CAAC,GAAG,CAAC;EAC9C,AkBjBE,ENSA,ECLE,ATTA,AHWE,EWGJ,CMTOM,CLIL,ATTI,AHWE,CGXD,AHWE,EiBNE,GjBMG,CAAC,MAAM,CAAC,CGXD,CAAC,GHWK,CAAC,GGXC,CAAC,KSSR,EAAC,IAAI,ADKC,ECLC,ADKA,eCLe,ADKA,ECLE,ADKA;AMRlD,EVUE,IIDI,ARdA,AIeA,APJE,COID,CKNC,ETTE,AIe0B,EIDxB,AJCwB,EIDtB,ARdA,CAAC,ESSE,GTTG,GQcG,ARdA,GAAG,EAAE;AJsB3B,AkBfD,EpBiBU,EURN,ARMH,EYPK,CJCC,CKNC,ATTA,AIeA,CUTCO,CNQC,EAAE,ARdA,ANuBQ,AEFnB,CYPY,ARdA,ANwBP,EEHL,CFGkC,CUTlB,AUTAA,CpBmBX,AUVW,AUTCP,CVSC,GIDG,AZOrB,AkBfqB,ClBerB,CFImB,AoBnBI,CNQC,CdYnB,CM1BqB,CAAC,CQcC,CZO5B,CFKkB,EcZc,ARdA,AN0Bd,AEHJ,CIvBmB,aJuBL;AUH7B,ELaE,Aa1BE,EpBqBA,AUZA,APJE,CWGD,CMRGQ,CLGD,ADKA,AJCA,CKNC,ALMA,APJE,CSQD,ATRE,CHgBD,AoBrBE,GAAGR,CVSD,CHiBC,AGjBA,CHiBA,CJrBI,AiBLA,Cb0BJ,AJrBK,AiBLAN,CVSD,CAAC,EPJI,CSQD,AQbE,CRcrB,EFLsB,EEKe,AFLb,EEMxB,EFN4B,CAAC,CEMR,EACrB,GFPmC,CAAC,EPJI,CAAC,CSW1B,EACf,ETZ8C,CAAC,CAAC,SSY1B,EAAA;EAExB,ATbE,AiBLA,Eb0BA,AGjBA,EKNE,ADKA,AdYK,CAAC,AUXL,CESC,AFTA,CUTGM,Cb0BD,EOlBE,CPkBC,Aa1BE,CNQD,AMREC,Eb0BA,Ea1BI,CVSD,CHiBC,CAAC,CGjBC,AUTEC,CNQD,GAAG,AJCA,CHiBC,AGjBA,CHiBC,Ga1BK,CVSD,CUTG,Kb0BG,CAAC,COlBR,CAAC,EPkBW,CAAC,GOlBN;EXDlC,EIoBA,AKTK,ANtBL,AIcA,AUTIM,CRiBE,CETJ,AdWQ,CUVP,CHiBC,AGjBA,AUTI,Cb0BH,COlBC,CMRKR,Cb0BH,AOlBA,EPkBE,Ca1BK,CNQP,AMRQC,IAAI,CVSH,AUTIP,CVUjB,IAAI,AUVkB,CVUjB,IAAI,EACT,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,EIJ4B,EAAC,AJIzB,EACT,IAAI,CAAC,IILwC,AJKpC,EACT,CINgD,CAAC,CAAC,CJM9C,CAAC,CINgD,GJM5C,EACT,IAAI,CAAC,IIPqD,AJOjD,CIPkD,AJQ9D;AKZL,IHaY,ANrBR,ANuBW,AUFX,AUhBIM,CNQH,AdUW,COQV,AOlBA,CJQC,CVEY,AUFX,AUhBI,GdLD,AcKIA,Cb0BH,APRW,EUFT,CAAA,AUhBK,Cb0BH,AD/BA,AIqBA,AUhBIC,IAAI,Cb0BH,CAAC,uBAAuB,CAAC;AQvB7C,AFYD,EDCa,ANpBX,AIqBA,AUhBE,CReU,CGbb,AfiBG,EYJa,CZIV,CAAC,CaLC,GEZR,EHawB,CGbxB,EfiBgB,CAAA,CAAE,GejBlB,CAAA,OAAA,GAEc,OFUyB,CAAA,EAAA,IEVX;ADK7B,EDME,ADCA,AQfE,Eb2BA,APRA,EaLE,ADCA,CAAC,AZIA,CAAC,CoBnBGO,CPcD,CNaC,EMbE,AOdE,Cb2BD,AMbA,GDCG,AZIA,CYJC,EZIE,KAAK,OYJO,CAAC,CAAC,EAAE,CAAC,CAAC;AELtC,ARfC,AIqBA,AUfD,Eb2BE,AMbA,ADEA,ENtBD,ANyBG,AUJH,EGDK,CbKC,CAAC,GaLG,AbKA,CMzBV,ANyBW,AUJX,CVIY,CaLC,CAAC,APpBd,ANyBc,AUJd,CVIe,EAAE,IMzBjB,AIqBA,CJrBA,AIqBA,CVIuB,EAAE,CAAC,EAAE,CMzB5B,AIqBA,GJnBc,ANuBkB,AUDlB,CVCmB,EAAE,GAAG,CAAC,EAAE,EUDhB,GJtBG,ANuBkB,CAAC;AoBjBhD,Eb2BE,AMdA,ADEA,EZGE,EaLE,CbKC,CYHC,AZGA,CoBlBCC,GpBkBG,CaLC,AbKD,CAAE,CYHC,CCFC,CAAC,AObAA,CReC,AQfAT,IReI,AQfA,CReC,CQfC,SReS,CAAC,IAAI,CAAC,IAAI,CAAC;ECA1C,ADCA,AZGA,AGbE,AiBLA,IReE,AQfEU,CPcD,GOdK,GPcC,ADCA,ATVE,AiBLAV,CjBKA,EAAA,CiBLI,CReD,AQfEN,KAAK,IPcE,IAAI,CDCC,IAAI,UCDU,EAAE,CDCC,EAAE;AHzB7C,ET8BJ,AoBnBE,EPcA,ADCA,ATVE,IUSE,AVTE,CMhBM,AWWLM,EReA,CTVG,CAAC,AiBLA,CAACI,CReD,CAAC,CTVG,EAAE,AiBLA,GPcC,COdGF,GReC,CCDC,ADCA,IAAI,CAAA,AQfG,CPcD,ADCA,CQfG,CPcD,QJzBe,CAC9C,cAAsB,EACtB,YAAoB,EACpB,QAAgB,EAChB,SAAiB,EAAA;EAEnB,CGqBC,CQfKQ,EPcF,AVTE,EMXA,AWMI,CReH,EQfMV,EPcF,AVTE,EiBLI,CAACI,CPcH,AVTE,CUSD,AVTE,GiBLK,CjBKD,AiBLEV,CjBKD,IiBLM,GXND,GAAG,CNWG,CAAA,CAAE,6BMX2B,CAC3D,cAAc,CACjB;EACD,EGmBE,AQfIM,CPcH,GJlBG,AWII,GPcD,ADCA,AQfIA,IReA,AQfI,CReH,AQfII,KAAK,KReC,CAAC,IHnBI,GAAG,MGmBM,CAAA,CAAE,qBHnBqB,CAAC,YAAY,GAAC,CAAC,CAAC;EFgC7E,AE/BA,AWIE,EjBKE,EUSA,EJlBE,GNSK,CIsBD,CAAA,AMbC,ENaD,AJtBK,EUSA,CAAC,IJlBI,GAAG,sBAAsB,GAAG,QAAQ,GACtD,sBAAsB,GAAG,QAAQ;AGmBrC,AEPA,EXHI,AMRF,AWGE,Eb2BA,IE9BI,CKWC,AMREM,Cb2BD,GAAG,Aa3BE,Gb2BC,IAAI,CAAC,EE9BE,CF8BC,CAAC,CE9BC,GKWG,CACzB,IAAqC,CPkBN,CAAC,AOjBhC,IPiBoC,CAAC,QE9BQ,EKab,CLbgB,CKchD,OAA+B,CLd0B,CKc1B,ELb/B,uBAAuB,GAAG,SAAS;AGmBvC,AQhBA,ENYE,AdOQ,AGbN,AMPF,EF4BE,AMbA,INaI,AMbA,ACFA,CPeC,AE5BA,GF4BG,APRQ,CAAC,COQP,CMbC,CbKmC,EaLhC,AbKgC,CaL/B,CCFC,CDEC,ECFE,IAAI,CAAC,SAAS,CAAA,CAAE;EACrC,EdOE,ASpBA,EF4BE,AMbA,ECFE,EDEE,AbKA,EOQE,CMbC,GNaG,CMbC,CAAC,GNaG,AMbA,CNaC,AMbA,IAAI,CAAC,AJfA,CKaC,EDEE,CAAC,ACFA,IAAA,GDEO,CAAC,EAAE,INaI,AMbA,CNaC,AMbA,oBCFU,EAAC,YAAY,CAAC;AMXtE,ENYE,ELbE,CIeC,CbIM,CAAC,CcNJ,GDEG,eJfe;AWE1B,Ib4BI,AOjBK,ALZL,EIeE,AbGQ,CAAC,EoBjBNC,Eb4BE,AMdA,ECHO,CPiBJ,AMdA,IAAI,CAAC,AJfA,AWCAA,CAACX,EPcE,CAAC,COdC,EAAEN,IPcI,COdC,CPcC,COdC,IPcI,CAAC;ENepC,Aa5BE,ENUgB,ALXhB,ETiBa,AoBhBTM,IAAI,IAAIE,KpBgBc,IoBhBL,IAAIF,IAAI,CAACN,KAAK,IAAIA,KAAK,EAAE,OAAOM,IAAI;Eb8B3D,AOpB0B,AMTxB,CNSyB,ALV1B,GKU6B,AdMA,AoBfxBN,KAAK,ENS0B,CMTvBM,IAAI,CAACN,CpBeyB,EAAE,EoBftB,EAAE,OAAOiB,UAAU,CAACX,IAAI,CAACC,IAAI,EAAEP,KAAK,CAAC;AXA/D,EIgBE,ACLA,AMVE,MpBc6C,CaCxC,AOfEiB,UAAU,CAACX,CpBcwC,EAAE,CoBdtC,CAACI,KAAK,EAAEV,KAAK,CAAC;AACxC,ENUE,EDKE,EbFkE,EaE9D,ACLA;AMRR,IPaU,ACJN,AdEmE,AoBXnEkB,CpBWoE,GAAG,IAAI,KoBX9D,GAAG,EAAE,INSI;AFO1B,AQfA,EjBKI,CUQD,CCJC,AdEA,KYIK,AQfAC,CpBWC,MGNQ,CACV,AiBNSA,CAACb,CNSC,GMTG,CjBMkB,CiBNhBc,CjBMgB,GiBNZ,CReC,CACzB,AQhByB,IRgBY,EACrC,eAAgC,EAChC,QAAe,EACf,aAAsB,EAAA;ACL1B,ENeE,AKRA,AQpBE,ENSA,AXFE,EHGK,AoBVJd,ERoBC,EQpBG,Ib4BG,Aa5BDE,Cb4BC,EAAA,Ma5BQ,EAAC;APevB,ECNkB,CACf,CPmBC,AKTK,AZVa,AGFhB,AiBPEU,CRmBE,AZVa,CcAjB,CFUM,CZVc,EcApB,AXFM,CIqBD,IAAI,CAAC,AKTK,CQnBA,CAACG,GpBSiB,CoBTb,CAACf,CjBOD,GAAG,AiBPE,CjBOF,AiBPGN,Eb4BF,CAAC,Ea5BM,CjBOF,AiBPG,KjBOH,IIqBQ,AJrBR,CIqBQ,CAAE,EJrBhB,GWEW,EAClC,CXH6B,KAAA,KAAA,CAAA,GAAA,KWGT,AXHS,CAAA,CWI7B,EXJuB,MAAM,CAAE,GWInB,CXJuB,CWKnC,KXLwC,GWKhC,CXLoC,CWM5C,EXN+C,MAAM,CWM5C,CACZ,CXP2D,OAAO;EIsBnE,AObA,EFGqB,AZRnB,AGFE,AiBREmB,CRkBgB,EAAE,AZRnB,CAAC,GAAG,CAAC,AoBVI,CpBUH,AoBVIb,EpBUF,CAAC,CoBVK,CpBUH,AoBVIC,IAAI,EpBUF,AoBVG,CAAC,CpBUF,AoBVG,CpBUF,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC;EOoB9C,AKZiC,AEFjC,CFEkC,CZPhC,AGFE,AiBREY,ERiB+B,CZPhC,CcKC,AdLA,AGFE,CAAC,GiBRK,CjBQD,AiBREb,CRiB8B,ATT/B,GiBRK,CjBQD,AiBREI,CpBUH,GAAG,AGFE,CAAC,AiBRE,CNeH,CMfI,CAAC,CNeF,AXPE,AiBRC,CjBQA,KHEG,AGFE,EAAE,MWOI,GAAG,CAAC;EFI3C,AEHA,AMfE,EpBUA,EGFI,CHED,CcKC,AdLA,EGFI,IWOE,AdLA,CAAA,CAAE,AGFE,CWOA,CXPE,eWOc,GAAG,sBAAsB,GAAG,CAAC,GAC7D,cAAK,CAAC,aAAa;AMfrB,ERkBE,AEFA,AdNA,IYQI,EEFE,AXRE,IWQE,GAAI,AXRC,KSUG,CTVG,CAAC,CSUD,QEFS,GAAG,EXRG,CSUD,ATVE,CSWjC,IAAI,EACJ,YEJmD,GFIpC,AEJuC,CAAC,CFKvD,EEJJ,cAAK,CAAC,aAAa;AMhBrB,ENkBE,AdPA,EYSK,AQpBHY,CRoBI,EAAE,SAAS,AQpBH,GAAG,EAAE;AACrB,ENkBE,EFCmB,CAAC,CTXd,CSWgB,EQnBfC,IjBQM,CAAC,EiBRAA,CNkBC,AMlBAjB,CNkBC,AXVE,CAAC,EiBRA,EAACc,IAAI,EAAC,SNkBW,CAAC,eAAe,EAAE,cAAc,CAAC;EPYrE,AKX+B,AEC/B,AMnBE,CRkB8B,EAC5B,CQnBCd,Gb6BE,CAAC,Aa7BC,Eb6BmB,EAAA,Aa7BjBE,IRmBM,CAChB,IQpBmB,EAAC;ERqBrB,AEDA,EPUE,AJpBE,AiBTEe,ERoBF,CAAC,IQpBQ,CAACjB,IAAI,CRoBH,AQpBIC,CRoBH,GQpBO,CNmBH,CAAC,AMnBG,CAAC,CAAC,ENmBD,EAAE,GFCG,CAAC,SAAS,EAAE,AEDA,EAAE,GAAG,EAAE,EFCE,CAAC;ACLtD,EDME,ELSE,AOXgD,AXT9C,AiBTEe,ERoBF,CAAC,CLSC,AJpBE,CUKD,CCIiD,EPW9C,AJpBE,CIoBD,AJpBE,GiBTK,CRoBH,ATXE,AiBTED,CRoBH,GTXK,AiBTE,Cb6BH,AKTA,ATXE,AiBTEf,CPcH,ADMA,CLSC,AMdpB,EVNwB,AiBTE,CjBSD,AiBTEN,CPeU,EACrC,EVP8B,AiBTE,CAAC,CPgBZ,AVPW,EUQhC,EDGkC,CAAC,MCHf,EACpB,QAAe,EAAA;EAEjB,ADEA,AZVQ,EcMkD,AMjBpDuB,Eb6BF,AJpBE,EUUA,ENUE,AJpBE,CIoBD,APlBQ,AoBXJ,CpBWK,AoBXJjB,Eb6BF,CAAC,APlBkC,CGF/B,AiBTE,CpBW6B,AoBX5BI,CjBSD,IiBTM,EAAC,CAAC,CAAC,Qb6BK,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC;EKP7D,AEL8D,AMhB5D,CNgB6D,CDExD,ACFyD,AdL9D,CaOM,GDGF,ATZE,EHEA,IGFM,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,IAAI;AWQ5C,AMhBA,Ib8BI,AMbQ,ADGH,EZVE,CAAC,CYUC;AEJZ,AMfD,EPgBa,CAAC,CNcV,AKXW,AEJd,AMfGc,EPgBa,AbPH,AGAN,CHAO,COqBP,CAAC,GOfR,CXNc,CUOU,AVPT,CWMf,GPeiB,AJrBE,AiBTF,EjBSI,CIqBA,Aa9BD,CNepB,CAAA,AMfsB,CjBSG,CAAC,CIqBY,GJrBR,CIqBY,AOf1C,AXN+B,GWQjB,oBAAoB;AMhBnC,EPgBE,ADEkB,CAAC,ETTd,CIqBD,AKZkB,AZVP,EaQT,COhBCC,EpBQa,AGCT,CIqBD,GJrBK,CSSiB,CAAC,CQlBjBA,CjBSG,AiBTFnB,CRkBmB,ATThB,CSSiB,EQlBhB,ERkBoB,ATThB,AiBTFc,CRkBoB,ECFjB,CVPG,AiBTF,CjBSG,CUOD,AOhBD,GjBSM,CAAC,GUOC,CAAC,AVPE,EAAE,EUOA,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;EAC7D,ADGA,AQnBE,IPgBE,AbTkB,AGEhB,AiBTDd,CPgBA,CNaM,EJpBD,AiBTD,Gb6BO,Ca7BLE,EjBSK,CUOD,CAAC,AVPE,KiBTE,EAAC,OPgBS,CAAC,CAAC,EAAE,CAAC,CAAC;EAEpC,ADEA,EZbmC,AoBN7BiB,CpBM8B,CYahC,ELSc,APtBqB,AGG/B,ESUA,CAAC,CZbkC,CoBN5B,CjBSD,AiBTEnB,CRmBH,ATVE,ESUA,CQnBK,CAACC,IAAI,EAAC,CAAC,CAAC,EjBSC,CAAC,GAAG,IAAI,CAAC,KAAK;EUS3C,EDEE,AZbA,AoBNIkB,Eb2BiB,CAAC,CMVlB,ENUqB,AKRnB,AZbA,GoBNO,CAACnB,Cb2BgB,AMVnB,GAAG,AOjBI,CAACI,CRmBH,ECFE,CAAC,ADEA,CQnBK,EAAC,CAAC,CAAC,KPiBE,ADEA,CCFC,ADEA,GAAG,CCFC,ADEA,CCFC,GDEG,CCFC,ADEA,CCFC,GDEG,CAAE,CAAC,IAAI;ECDpD,EDEE,AQnBIc,Eb2BF,APtBK,AGIH,ISUE,ELQE,CJlBG,CAAC,IUQE,AVRE,AiBTE,CPiBH,AOjBIH,CjBSD,EUQA,CAAC,AOjBI,CRmBH,ATVE,AiBTEf,CjBSD,ESUA,CQnBK,CAACN,CPiBH,AVRE,CAAC,CUQD,EOjBM,CAAC,CRmBH,GAAG,ECFE,CAAC,WDEE,CAAC,UAAU;ECDrD,AOjBE,ERmBA,AZfkB,CAAC,CaajB,ENSO,APtBa,EYehB,ELOO,CMTJ,CNSM,IMTD,GbbqB,CYejB,GAAG,OCFO,IAAI,oBAAoB,EAAE;AOhB1D,IPiBI,AbZA,AGKE,EIekB,AKNlB,CLMmB,AKNlB,EAAE,CLMmB,CMRjB,GNQqB,CAAC,AMRlB,CAAC,EDEE,GAAG,IAAA,CCFK,CAAC,CNQmB,CAAA,CAAE,CAAC,AMRlB,CAAA,CAAE,UNQ4B,CACnD,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAC3B,CKRsD,EACtD,ELOK,EKPD,CLOI,EKPD,ELOK,CAAC,GAAG,CAAC,GKPA,CACpB,KLM6B,EAC1B,CAAC,EAAE,CAAC,CACP;Aa5BP,GPiBG,CbZC,AGME,AiBXA0B,Eb8BA,AKTA,CAAC,ECJE,ADIA,CZhBC,KoBLO,GpBKC,AoBLE9B,GpBKC,GAAG,EoBLI,CAACO,WpBKA,CAAC,EoBLa,CAAC,KpBKN,IAAI,IoBLe,CAAC;AAC1D,IPiBI,AbZA,AGME,AiBXAwB,CRqBD,CLSC,IPzBI,AGME,CUMD,AVNE,CImBD,Ea9BI,CPiBD,CAAC,CNaC,Aa9BE/B,CpBKD,EOyBE,CPzBC,CGMG,CAAC,CImBL,Ca9BO,CPiBD,AVNE,AiBXAO,CPiBD,GVNK,CAAC,IHNP,CAAC,AGMY,CAAC,GUMA,AOjBE,CPiBF,AOjBG,CPiBD,CVNI,CHNX,AGO3B,CIkBwB,EAAC,APzBG,CAAC,AGOzB,CAAC,GIkByB,CAAC,Aa9BgB,Cb8Bf,AJlBrB,AiBZqC,Cb8Bf,AJlBrB,EIkBuB,KAAK,CAAC,CAAC,CAAC,CJlBpB,CIkBsB,AJlBtB,CAAE,CAAC,GIkBwB,CAAC,CAAC,AJlBrB,CIkBsB,CAAC,AJlBrB,IAAI,CACtC;AiBZP,IRsBI,AZhBA,AGQE,AiBdAyB,Eb8BA,CPxBC,CAAC,EOwBE,IAAI,CAAC,Ca9BG,CpBMD,CYgBC,CQtBGhC,CpBMD,CYgBC,MQtBQ,CAACO,GpBMC,IOwBI,KAAK,CKRC,CACjC,AQvBoC,CAAC,Eb8BA,CKPjC,CLOmC,AKPlC,IAAI,EACT,IQxBmD,CAAC,URwBrC,EACf,YAAY,EACZ,aAAa,CAChB,IAAI,cAAc;ACTvB,AOhBA,IR0BI,AZrBA,AGQE,AiBbA0B,GpBKC,COwBC,AKHJ,AZrBI,IOwBI,APxBA,COwBC,Aa7BE,EpBKA,CoBLGjC,EpBKA,MoBLQ,CAACkC,CpBKD,IAAI,GOwBG,GAAG,KAAK,Aa7BE,CAAC,EpBKT,CYqBH,AZrBI,EYqBH,GQ1BmB,CAAC,CAAC,CpBKV,AoBLW,CAAC,CpBKV,OYqBE,EAAE;ACRlD,AOjBAD,IpBKI,AGQE,ESaA,CZrBC,COwBC,APxBA,CoBLC,Cb6BC,Aa7BA/B,Cb6BC,CKHC,EAAE,CTbI,CIgBF,AJhBG,CIgBF,APxBA,GAAG,AGQG,GSaA,ATbG,GiBbA,CjBaI,AiBbH,CpBKC,AGQG,IAAI,EiBbD,EAAE,YAAM;EACtC,EpBKA,AGQE,ESaA,AQ1BIE,CpBKH,CAAC,EYqBE,CQ1BK,CR0BH,EQ1BME,CjBaA,CHRF,AGQG,CHRF,IGQO,CHRF,AoBLI,CAACN,CR0BH,AZrBA,AGQG,CSaF,AZrBA,EAAE,CAAC,AGQG,CAAC,EHRD,AoBLI,CAACO,EjBaC,KHRE,CAAC,MoBLU,CAAC,SAAS,CAAC,CAACH,KAAK,CAAC;EpBMlE,AoBLE,Eb6BA,AJhBE,CIgBD,AKHA,CQ1BG+B,CR0BD,CTbG,GiBbG,CAAC/B,EjBaE,EAAE,CiBbC,CAAC,EAAE;EpBOpB,AoBNED,Eb8BA,EKJE,ATbE,AiBbA,GAAGa,GR0BC,ATbE,CAAC,CSaD,KQ1BO,CAACb,GR0BC,CQ1BG,ER0BA,AQ1BEC,CjBaC,CAAC,ESaA,CAAC,ATbE,AiBbA,CAAC,SR0BO,CAAC,ATbE,SSaO,CAAA,CAAE;EQzBjDI,Eb8BA,EKJE,AQ1BE,CAAC,Cb8BD,Aa9BE,Cb8BD,CKJC,ELIE,AKJA,CLIC,aKJa,GLIG,AKJA,CLIC,GKJG,CAAC,IAAI,CAAC,ELIE,EAAE,IAAI,CAAC,CKJC,CAAC,OLIO,CAAC,CKJC,CAAA;AQzB3D,CAAC,Cb8BC,Aa9BA,EjBcI,CSYD,CAAC,KTZO,CAAC,IAAI,EAAE,WAAW,CAAC;AiBZhC,Eb8BE,AJjBE,EiBbE4B,SAAS,GAAGpC,QAAQ,CAACkC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AACxDE,ER0BE,ATZE,OiBdK,CAAClC,gBAAgB,CAAC,OAAO,EAAE,YAAM;ER2BxC,AZrBA,AoBLE,IR0BE,AQ1BIE,IR0BA,CAAC,AZrBA,AoBLI,CpBKJ,EAAA,AoBLOE,ER0BF,EAAE,IQ1BQ,CAACN,QAAQ,CAACO,cAAc,CAAC,SAAS,CAAC,CAACH,KAAK,CAAC;EAChE,ER0BA,AZrBA,EoBLI+B,IR0BE,AZrBA,CoBLG,CAAC/B,KAAK,CAAC,EAAE,ER0BA,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAE,CAAC,KAAK;ACT1D,EOhBI,ER0BA,EZrBE,AoBLIiC,GPgBD,CDUC,EQ1BM,GAAGhB,KpBKC,CaWC,CACjB,AbZkB,EYqBE,CQ1BK,CPiBY,AOjBXlB,CR0BH,CCRvB,EOlB8B,EPkBT,AOlBWC,EPmBhC,EDOgC,CQ1BK,CAAC,CR0BH,ICPlB,EACjB,QDMwC,CAAC,CCNvB,EAClB,ODKmD,ECL/B,EAAA;ENUtB,AMRA,AOtBE,ER0BA,EQ1BMkC,EPsBF,AblBe,CO0Bd,CAAC,AKJA,ELIoB,EAAA,Ka9BP,EPsBF,AblBe,CoBJVtC,CR0BH,AZtBe,CakBd,EDIE,ECJF,EOtBU,CAACO,cAAc,CAAC,UAAU,CAAC,MPsBR,EAAC,UAAU,CAAC;EAC/D,AOtBE,Eb8BA,EKJE,AZvBsC,AoBHpC+B,CR0BD,CCJC,CDIC,SAAS,CCJC,AOtBE,ER0BA,CCJC,COtBG1B,ER0BJ,CCJC,MOtBY,EAC1B0B,aAAa,CAACC,MAAM,CAAC,CAAC,KPqBqB,EAAC,UAAU,CDIE,ECJC,ADKvD,CCLwD,CAAC,GDKpD,GAAG,YAAY,CACvB;ECLL,AOrBE,Eb6BA,AP5ByC,CACxC,CamBC,ADMA,AQ3BIC,CR2BH,CLEC,AP3BA,CYyBC,GLEG,AP3BA,CO2BC,Ca7BK,GAAGxC,GPqBD,ENQE,CMRC,CNQC,Ca7BK,CAACyC,EPqBF,WOrBe,CAAC,IAAI,CAAC;EPuB/C,AOtBED,EpBEA,CYyBC,CLEC,IAAI,Aa7BE,Cb6BD,AP3BA,AoBFEE,Gb6BC,CAAC,EP3BE,MoBFQ,CAAC,IAAI,EAAE,Ib6BE,CAAC,Ka7BO,CAAC,Cb6BD,EAAE,IAAI,CAAC,SAAS,CAAC;EMNzD,AbpBA,AoBFE,ER4BA,ECNE,AOtBEC,IPsBE,CAAC,GOtBK,CPsBD,EAAE,AOtBE3C,CR4BD,GAAG,IQ5BM,CAAC4C,cAAc,CR4BD,AQ5BEP,CR6BnC,IAAI,CAAC,AQ7BoC,KR6B/B,EACV,eAAe,AQ9B0BQ,ER+BzC,IQ/ByC,CAAsBzC,KAAK,GR+BvD,EACb,aAAa,CAChB,IAAI,WQjCmEyC,GRiCrD,GQjCqD,CAA+BzC,KAAK,gBAAa,CAAC;EpBI5H,AoBHEoC,Eb8BA,AMRA,ADWA,IAAA,ECXM,AOtBE,CAACM,WAAW,CAACH,GPsBC,GAAe,EOtBR,CAAC,CPsBW,CAAC,IAAI,CAAC,IAAI,EDWvB,ECX2B,ADW1B,ICX8B,CAAC,IAAI,CAAC,KAAK,ADW1B,EAAE,CCV5C,CAAC,GAAG,SAAS,EAAE,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;EOtBzC3C,Eb8BA,AMPA,EDUE,ELHE,CAAC,CMPC,AOvBE,CAACO,CRiCD,EAAE,CCVC,GNOG,AMPA,GNOI,EKGC,EQjCI,Cb8BY,Aa9BX,CPuBD,GNOgB,AMPZ,GAAG,COvBE,CAAC,CPuBA,AOvBCuC,WAAW,CAACN,EPuBR,CAAC,KOvBe,CAAC,OPuBF;AOtBzD,CAAC,CjBaG,AiBbF,EPwBE,ENME,AKGA,ETpBI,CACF,CSmBE,ELHE,AKGA,ETnBI,EACR,EUSU,GAAG,CVTmB,EAAA,CSkBf,CAAC,SCTS,CAC3B,IAAI,CAAC,IAAI,EACT,IAAI,EACJ,gBAAgB,EAAE;AOzB1BV,IjBeM,CSiBD,CCNK,CAAC,ADMJ,CLJM,CMFA,EO1BF,CAAC5B,Cb4BM,CMFA,cO1BU,CAAC,OAAO,EAAC,YAAI;EACrCoB,EjBeE,EUWI,ADMJ,CCNK,CNCS,AJZV,CUWG,GDMD,CTjBG,CSiBD,CQhCG,CjBeC,EiBfE,EjBeE,AiBfA,CjBeC,ESiBA,GAAG,ATjBE,ISiBE,ATjBE,CSiBD,GTjBK,CAAC,IAAI,ESiBA,ATjBE,CSiBD,SAAS,CAAA,CAAE;EZ7BnD,AoBFEC,GP0BK,CNAgB,AMCpB,ADKC,AZ9BA,AGaE,CIWkB,APxBnB,GOwBsB,AMCpB,ADKC,AQhCE,CAACpB,CRgCD,ATjBE,CAAC,EIWmB,Aa1BjB,CpBED,CoBFE,CAAC,CpBEA,AoBFC,CAAC,GpBEE,CayBA,AbzBC,AGaE,CAAC,CSiBD,ETjBI,CSiBD,GTjBK,CSiBD,ATjBE,CSiBD,GTjBK,CHbD,AGaE,CSiBD,AZ9BA,CY8BC,ITjBM,CAAC,GHbC,EY8BE,AZ9BF,AGaI,CSiBD,CTjBG,IAAI,CAAC,GSiBC,CAAA;EQ/BxD,EP2BA,AbzBA,CY8BC,CLNC,AKMA,ATjBE,AiBfE4C,EP2BN,EbzBM,GOwBG,AJXE,AiBfE,Cb0BH,AJXE,EiBfI/C,Cb0BH,CAAC,KAAK,Ca1BK,Cb0BH,AJXE,AiBfEO,EjBeA,GIWC,CAAC,AJXE,CAAC,OiBfS,CAAC,KP2BZ,EAAC,GO3BqB,CP2BjB,AO3BkB,EP2BhB;EO1BnC,Ib0BE,AMCA,AbzBA,AoBFCwC,Mb0BK,AMCA,CO3BE,CP2BA,GO3BEnC,GpBEI,EAAE,CayBC,GO3BE,EACjBmC,OAAO,CAACR,MAAM,CAAC,CAAC;ERiCtB,AQhCE,EjBeE,EUWA,AO1BIS,EbwBG,APvBL,CY+BC,CCNC,ENFO,AMEL,ENFO,AaxBD,GAAGhD,MRgCE,EQhCM,CAACyC,aAAa,CAAC,IAAI,CAAC;ARiCjD,EQhCIO,EjBeE,CUWD,CNHmB,APvBH,COuBI,AMGlB,CVXG,EIQkB,AavBhB,CAACN,EjBeE,CIQiB,CAAC,CJRf,IAAI,CAAC,EiBfE,CAAC,EjBeE,EIQkB,AavBhB,CbuBgB,CAAE,AJRhB,AiBfD,CbuBkB,GJRb,CAAC,KAAK,AiBfD,CAAC,CjBeE,CIQiB,CACnD,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAC3B,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAC1B,CAAC,EAAE,CAAC,CACP;AKOP,EQjCI,EpBAG,CACF,CO0BC,AMDA,AVXE,AiBfAC,Eb2BA,AP1BA,CO0BC,GMDG,AbzBA,AGcE,CIYL,AJZM,CUWD,AO1BE,GAAG3C,OjBeO,CAAC,AiBfA,CAAC4C,CP0BD,CVXG,EUWA,EVXI,CAAC,CIYd,AMDa,CAAC,CNCb,EJZkB,CAAC,CiBfC,Cb2Bf,Aa3BgB,Cb2Bf,CAAC,CAAC,CMDe,AVXE,CIYf,AMDc,AVXE,KIYX,AJZgB,CIYf,CAAC,AJZgB,CIYf,Aa3BgB,CP0BD,AO1BE,Cb2Bf,AMDa,CAAE,AVXE,CAAC,GIYb,CAAC,CAAC,CAAC,CAAC,CAAC;Ea1BhDI,Eb2BA,APzBA,COyBC,CMDC,AVXE,EHbA,EawBE,AO1BE,CAACF,CP0BD,CVXG,CAAC,OHbK,CoBFG,CP0BD,AO1BEH,CpBED,CGaG,CUWD,CVXG,GUWC,CAAC,AVXE,AiBfA,CjBeC,AiBfA,CpBED,EawBE,AbxBA,CawBC,UAAU,CAAC,SAAS,CAAA;EOzBpDA,Eb4BA,CMFC,CAAC,AbxBA,IoBFM,EpBEA,CoBFG3C,QAAQ,CAAC4C,apBEW,CoBFG,CAACtB,CpBED,YoBFc,CpBED,AoBFE,GpBEC,UAAU;EoBD5D0B,Eb4BA,AJZE,EHdA,EO0BE,CAAC,CP1BC,AoBFE,CpBED,AoBFEF,Cb4BD,CAAC,Sa5BW,CAACH,EpBEA,CAAC,GO0BG,CAAC,Ca5BG,CAAC,Kb4BG,EAAE,AP1BA,GAAG,CO0BC,CAAC,SAAS,CAAC,WP1BW,GAAG,SAAS,GACvE,SAAS,GAAG,uBAAuB;EO0BvC,AMDA,AO3BEA,EjBgBE,EHbA,EGaI,EiBhBE,EjBgBE,CHbD,AGaE,AiBhBA3C,IpBGE,CGaG,GiBhBG,CAAC4C,CjBgBC,KAAK,EAAE,MiBhBM,CAAC,GAAG,CAAC;EP4BzC,AO3BEI,IP2BE,AVXE,IUWE,AO3BE,CP2BD,AO3BEF,CjBgBC,GAAG,CUWD,EAAE,AVXE,IAAI,AiBhBA,CjBgBC,AiBhBAH,QAAQ,CAAC,KjBgBK,CAAC,MAAM,CAAC;AIY9C,AKMD,EQjCI3C,Eb2BH,AMAG,AbvBA,EGYI,GSiBC,CCNC,AO3BE,CpBID,AoBJEO,Cb2BZ,CJXc,EIWd,CPvBe,CGYG,CAAC,IIWnB,AJXuB,CIWvB,Ea3B0B,CP2BD,AO3BE,GP2Ba,CNAxC,GAEc,AMF8B,CAAC,AO3BV,CAAC,CAACuC,GP2Ba,ADMZ,CCNa,ADOhD,ICPoD,ADOf,EAAA,CQlCQ,Cb6BnB,AMF8B,AO3BVE,IP2Bc,CAAC,GO3BP,CAAC,CP2BW,CAAC,KAAK,GACtE,CAAC,GAAG,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC;AO3B9C,CAAC,CRmCC,AZ/BA,AoBJA,EP4BE,EVZI,ESmBA,ECPE,EDOE,CTnBG,ESmBA,CCPC,CVZG,CAAC,CUYD,ADOA,CAAC,GTnBK,CSmBD,GAAG,CCPC,GAAI,GAAG,GAAG,cAAK,CAAC,KDOa,CACnD,IAAI,CAAC,ECR+C,EDQ3C,CACZ,GAAG,GAAG,GAAE,CAAC;AQnCZjB,ERoCE,AZhCA,EawBE,EVbI,ESqBA,EQpCE,CAAC7B,ERoCE,ATrBE,GSqBC,ATrBE,EUaA,EDQE,CCRC,ADQA,KAAK,CQpCC,CAAC,CRoCC,MCRM,AO5BA,CP6B3B,CO7B4B,GP6BxB,CAAC,KAAK,EACV,CO9BgC,GP8B5B,EACJ,KDKmD,CACrD,IAAI,CAAC,KCNa,ADMR,CACb,CCPuB,EDOpB,GAAG,GAAE,CAAC;EACV,AQtCEwB,IP+BM,CAAC,EAAE,GDOD,CAAC,CQtCG,CP+BG,CDOH,CAAC,AQtCE,EAAE,ERsCA,EAAE;EQrCnBC,ERsCA,ATtBE,EUeI,CAAC,CDOH,CCPK,AO/BF,CAACxB,CjBgBC,GAAG,AiBhBA,EAAC,CAAC,CjBgBE,AiBhBD,CjBgBE,AiBhBD;EjBiBhB,AiBhBA,ERsCA,CCPK,CACJ,AOhCK4C,IPgCD,GOhCQ,GAAG/C,QPgCG,AOhCK,CAACO,cAAc,CAAC,UAAU,CAAC;EACnD,CRsCD,CCNC,ADMA,EQtCGwC,EPgCH,KOhCU,IAAEnC,SAAS,EACjBmC,OAAO,CAACR,MAAM,CAAC,CAAC,CP+BQ,EAAC,IAAI,EAAE;AVhBtC,ESwBC,AZnCA,AoBHE,EjBcH,EUiBK,AO/BIS,EpBGF,CYmCC,AZnCA,Ga4BG,AVjBX,CSwBY,CCPC,AO/BI,CjBcjB,CSwBe,CQtCKhD,CpBGH,GYmCG,AZnCA,CGWpB,CUiBsB,AVjBtB,EHXwB,AoBHI,CpBGH,AoBHIyC,IjBc7B,GAEc,MiBhB4B,CpBGH,AoBHI,CpBGH,GoBHO,CAAC,KpBGC,EAAA,CGaf;ASuBnC,EQtCIO,EpBGA,Ea4BE,IAAI,Ab5BA,AoBHE,CAACN,CP+BD,WO/Ba,CAAC,IAAI,EAAC,UAAU,CAAC;ARwC1C,EQvCI,GP+BC,Cb5BC,AoBHEC,CP+BD,OO/BS,GAAG3C,GpBGC,EAAE,GoBHK,CAAC4C,cAAc,CAAC,YAAY,CAAC;EACpDI,IP+BE,Eb5BE,EoBHI,CAACF,CP+BD,EAAE,QO/BU,CAACH,IP+BE,GAAG,CO/BG,CAAC,EP+BA,CAAC,UAAU,CAAC,SAAS,CAAA,CAAE;EO9BrDA,IP+BE,Ab7Be,Ia6BX,AO/BE,EP+BA,CO/BG3C,QAAQ,CAAC4C,CP+BD,GAAG,IAAI,CAAC,KAAK,AO/BE,CP+BD,AO/BElB,UP+BQ,CAAC,CO/BG,CAAC,OP+BK,CAAA;EO9BrDsB,EpBEG,Ca6BF,Ab5BA,Ca4BC,Eb5BE,EoBHI,CAACF,CpBGD,UoBHY,CAACH,QAAQ,CAAC;EAC9BA,EpBIA,IAAI,EoBJI,GAAG3C,QpBIM,AoBJE,CAAC4C,EpBIA,SAAS,EAAE,CoBJG,CAAC,GAAG,CAAC;EPiCzC,AOhCEI,IpBIE,Ga4BG,COhCG,CAACF,CpBID,UoBJY,CPgCD,AOhCEH,QAAQ,CAAC,GpBIC,GAAG,aAAa,GAAG,UAAU;Aa6BhE,EOhCI3C,IpBIE,IAAI,AoBJE,CpBID,AoBJEO,cpBIY,AoBJE,CpBID,AoBJE,QAAQ,CAAC,CAACuC,GpBIC,GAAG,KoBJO,CAACE,QAAQ,CAAC,QpBIM,GAAG,SAAS,GACvE,SAAS,GAAG,uBAAuB;Aa8BzC,ADKA,AQvCA,CAAC,CAAC,IpBKI,GYkCG,IZlCI,IAAI,YYkCY,CACzB,IAAqC,EACrC,eAAgC,EAChC,OAA+B,EAAA;AQxCnChB,ER0CE,UAAU,AQ1CA,CAAC9B,ER0CE,IAAI,GAAG,CAAA,CAAE,KQ1CK,CAAC,OAAO,EAAC,YAAI;ER2CxC,AQ1CE0B,EpBKA,IYqCI,GZrCG,KAAK,AoBLE,GAAG,EAAE,CR0CD,GAAG,8BAA8B,CAAC,IAAI,CAAC;EAC3D,AZrCA,AoBLEC,MR0CI,GQ1CK,CAAC1B,IAAI,EAAC,CAAC,CR0CA,AQ1CC,CAAC,ER0CC,IAAI,CAAC,SAAS,CAAA,CAAE;EACrC,AZpCA,AoBNE,IAAM4C,ER0CF,KQ1CS,GAAG/C,QAAQ,CAACO,cAAc,CAAC,UAAU,CAAC;EACnD,ERyCK,EQzCFwC,ORyCW,AQzCJ,IAAEnC,SAAS,EACjBmC,OAAO,CAACR,MAAM,CAAC,CAAC;EACpB,ERuCgB,EQvCVS,MRuCkB,EQvCV,GAAGhD,QAAQ,CAACyC,aAAa,CAAC,IAAI,CAAC;EAC7CO,ERsC0B,MQtClB,CAACN,YAAY,CAAC,IAAI,EAAC,UAAU,CAAC;APiC1C,EDK2C,AZhCzC,AoBLE,CRqCwC,GAAG,AQrCvCC,GPgCC,IDK6C,CQrCtC,CpBKD,CAAA,CoBLI3C,CpBKJ,Ga2BM,CACjB,GOjCuB,CPiCa,AOjCZ4C,EPkCxB,IAAqB,EACrB,MOnCsC,CAAC,MPmClB,EAAA,MOnCgC,CAAC;EPoCxD,ADGA,AQtCEI,EpBKA,MAAM,AoBLE,CAACF,WAAW,CAACH,QAAQ,CAAC;EPoChC,ADGA,AQtCEA,IPmCE,Ab9BA,EYiCE,EQtCI,GAAG3C,IPmCE,GAAG,Ab9BA,CoBLG,CpBKD,AoBLE4C,EPmCA,YOnCc,CAAChB,cAAc,CAAC;EPoCpD,AOnCEoB,ERsCA,ECHE,Eb9BE,EoBLI,CAACF,IPmCE,GAAG,Gb9BG,CoBLG,CAACH,GRsCC,KCHK,AOnCE,CAAC;EPoChC,AOnCEA,ERsCA,ECHE,Eb9BE,EoBLI,GAAG3C,MRsCI,EQtCI,CAAC4C,CPmCD,GAAG,GAAG,OOnCS,CAAC,GAAG,CAAC;EPoCzC,AOnCEI,ERsCA,EZlCkB,Ea+Bd,EOnCI,CAACF,WAAW,CAACH,CPmCD,GAA4B,EAAE,EOnCrB,CAAC;EPoChC,ADEgB,AQrCd3C,CRsCD,CZlCI,CACF,Ca8BC,ADGA,EZjCE,EYiCF,AQtCM,CAACO,CpBKD,Qa8BQ,GAAG,EOnCI,CAAC,QAAQ,CAAC,CAACuC,CPmCD,CAAC,IAAI,EAAE,GOnCK,CPmCD,AOnCEE,EPmCA,ADGV,CCHW,CDI7C,ECJgD,EOnCI,CAAC,SRuCvC,EACd,ECLgE,CAAC,EAAE,ODKvD,EACZ,QAAQ,EACR,SAAS,CACZ;AQ1CH,CAAC,CR4CC,AQ5CA,EPmCE,Ab7BA,Ca6BC,EAAE,Cb7BC,Qa6BQ,Kb7BK,GAAG,cAAc,EAAE;AoBLxC,ER4CE,ECTE,AOnCEC,CPmCD,Cb7BC,Ca6BC,CDSC,GCTD,CDSK,CZtCC,CoBNG,CR4CD,EZtCE,AoBNEjD,CpBMD,MAAM,CYsCC,AZtCA,AoBNE,CR4CD,AQ5CEO,GR4CC,CAAC,IAAI,CAAE,CAAC,GZtCE,CYsCE,AZtCD,AoBNE,CAAC,KPmCP,EAAC,KOnCkB,CAAC,WPmCF;AOlCtD,ER4CE,CCTC,CAAC,AOnCE2C,IR4CE,MQ5CQ,GAAGlD,OR4CK,CQ5CG,CAACO,CR4CD,aQ5Ce,CR4CD,AQ5CE,GR4CC,CAAC,QQ5CU,CAAC;AACxD0C,EPoCE,ADQA,EZrCE,IYqCI,AZrCA,EoBPE,CAAC/C,GR4CG,GAAI,IZrCG,GAAG,GoBPG,CAAC,KR4CM,EQ5CC,CR4CE,CQ5CA,CpBOC,EAAE,SoBPG,SR4CgB,GAAG,CAAE;ECP9D,ADSA,AQ7CE,IpBOE,AoBPIiD,CPoCH,EOpCM,GAAGhD,CPoCH,Ab7BA,GoBPO,CpBOH,AoBPIC,CpBOH,IAAI,AoBPI,CpBOH,Ca6BC,GOpCO,CPoCH,EOpCM,GAAGa,IpBOA,CAAC,GoBPO,CAACd,CPoCH,EAAE,COpCK,CAAC,GAAGS,SAAS;ER8C7D,AQ7CE,EPoCA,EOpCM0B,WR6CO,CCTC,ADSA,CQ7CK,EPoCF,COpCKtC,QAAQ,CAACO,EPoCF,CACzB,IDQ8B,CAAC,MCRpB,AOrC8B,CAAC,CPsC1C,IAAI,EACJ,CDM8C,EAAE,AQ7CI,CAAC,KPuC5C,EACT,MDK8D,CAAC,UCL9C,EACjB,gBAAgB,CACnB,IAAI,cAAc;EDKrB,AQ9CE,EP2CA,AbnCA,EoBRI+B,EP2CA,GbnCG,KAAK,GamCG,AO3CE,IAAI1B,CP2CD,MAAM,EAAE,AO3CE,EAC1B0B,aAAa,CAACC,MAAM,CAAC,CAAC;EpBQ5B,AoBPE,IP0CE,AO1CIa,QAAQ,GP0CD,AO1CIpD,GP0CD,KO1CS,CAACyC,KP0CC,CAAC,IAAK,GO1CM,CAAC,IAAI,CAAC;EpBS/C,AoBREW,IP0CE,IO1CM,CAACV,IP0CE,GAAG,KO1CO,CAAC,GP0CC,CO1CG,EP0CC,AO1CC,GP0CE,GAAG,IO1CK,CAAC,SP0CD,CAAC,aAAc;EDIvD,AQ7CE,IP0CE,AO1CEC,QAAQ,GR6CC,AQ7CE3C,CR6CD,ICHI,CAAC,EDGE,AQ7CE,CR6CA,AQ7CC4C,CP0CD,CAAC,GDGI,GCHE,CAAC,ADGC,KQ7CM,CAACO,GAAG,KAAKvC,SAAS,iBAAAiC,MAAA,CAAiBM,GAAG,oBAAqB,CAAC;EAClGC,ER6CA,CCHC,KO1CO,CP0CD,AO1CEN,OR6CK,GAAG,CQ7CG,CAACH,GR6CC,KQ7CO,CAAC;EAC9B3C,ER6CA,ECHE,IO1CM,CAACO,MP0CI,GAAG,KDGK,AQ7CE,CR6CD,AQ7CE,IR6CE,CCHC,CAAC,ADGA,EQ7CI,CAAC,CAACuC,CP0CA,UDGS,AQ7CE,CAACM,CR6CD,OQ7CS,CAAC;AAC3D,CAAC,CAAC,IP0CI,ADGA,CAAC,EAAE,MCHM,ADGA,GCHG,ADGA,IAAA,KCHS,GAAI,GAAG,GAAG,cAAK,CAAC,aAAc,ODGI,EAAC,IAAI,GAAC,CAAC,CAAC;AQ3CrEF,EpBOE,IakCI,ADGA,CAAC,EAAE,CQ5CC,CAAChD,CpBOC,CYqCH,AZrCI,OAAe,EakCN,AblCM,CakCL,IAAI,AOzCA,CPyCC,AOzCA,OPyCO,AOzCA,CPyCC,COzCC,WR4CC,CQ5CK,CR4CJ,GAAG;EQ3CtC,EpBOA,CYqCC,CQ5CKmD,CR4CH,CZrCC,CAAC,AoBPI,GAAGlD,ER4CF,CAAC,CZrCC,AoBPI,CAACC,EpBOF,GoBPO,IpBOA,CoBPK,CR4CH,CAAC,CAAC,AQ5CI,GAAGe,QAAQ,CAAChB,IAAI,CAAC,GAAGS,SAAS;ER6C7D,AZrCA,AoBPE,CR4CD,CCHC,ADGA,EQ5CM0B,aAAa,EPyCF,COzCKtC,GPyCD,CAAC,IOzCQ,CAACO,cAAc,CAAC,UAAU,CAAC;ER8C3D,AZrCA,AoBRE,IAAI+B,aAAa,IAAI1B,SAAS,EAC1B0B,aAAa,CAACC,MAAM,CAAC,CAAC;EP0C5B,ADGA,AQ5CE,IAAMe,QAAQ,GAAGtD,MR4CE,CAAC,CQ5CK,CAACyC,ER4CF,EAAE,SQ5Ca,CAAC,IAAI,CR4CH,AQ5CI,ER4CF;ECF7C,AOzCEa,ER4CA,CAAC,EAAE,GQ5CK,CAACZ,ER4CA,GCHG,ADGA,GCHG,CDGH,GQ5CS,CAAC,IAAI,EAAE,CPyCD,CACzB,QO1CoC,CAAC,EP0C1B,EACX,IAAI,EACJ,SAAS,EACT,ODDqD,EAAC,IAAI,GAAC,CCC1C,ADD2C,CAAC,CCE7D,gBAAgB,CACnB,IAAI,cAAc;EAEnB,AOhDE,ER4CA,CAAC,CQ5CGC,CR4CD,IAAA,GQ5CS,GAAG3C,QAAQ,CAAC4C,cAAc,CAACS,GAAG,ER4CV,EAAC,CQ5CczC,ER4CX,OQ5CoB,iBAAAiC,MAAA,CAAiBQ,GAAG,oBAAqB,CAAC;EPiDpG,AOhDEC,CR4CD,EAAE,ICII,COhDG,CAACR,CR4CD,CAAC,SQ5CW,CPgDD,AOhDEH,GR4CC,CAAC,CAAC,GQ5CK,CAAC;APiDlC,ADJA,EQ5CI3C,QAAQ,CAACO,cAAc,CAAC,QAAQ,CAAC,CAACuC,WAAW,CAACQ,QAAQ,CAAC;APkD3D,ADNC,AQ3CD,CAAC,CpBOC,AoBPA,ER2CD,QAAA,GAAA,CZpCe,CAAC,CAAS,EAAE,CAAS,CYoCpC,CAAA,AZpCoC,OYoCpC,GAEc,oBAAoB;AQ3CnC,IpBMI,AoBNEC,IpBME,CAAC,CAAC,EoBNI,CpBMD,CAAC,CoBNGvD,QAAQ,CAACO,cAAc,CAAC,UAAU,CAAC;AACpDgD,IpBMI,IAAI,AoBNA,CpBMC,AoBNArD,CpBMC,GAAG,CAAC,WoBNW,CAAC,OAAO,EAAE,YAAM;EpBOvC,AoBNEC,IAAI,GAAG,IAAIE,oCAAc,CAAC,GAAG,CAAC;EpBQhC,AoBPEG,IAAI,CAAC,CAAC;EACN,IAAMgD,cAAc,GAAGxD,QAAQ,CAACkC,gBAAgB,CAAC,YAAY,CAAC;EAC9DsB,cAAc,CAACC,OAAO,CAAC,UAAAV,OAAO;IAAA,OAAIA,OAAO,CAACR,MAAM,CAAC,CAAC;APkDtD,EOlDsD,EAAC,KPkD9C,gBAAgB,CACrB,IAAqC,EACrC,IAAqB,EACrB,OAA+B,EAAA;AOpDnC,CAAC,CPsDC,AOtDA;AACF,EPsDE,MAAM,COtDC/B,IAAIA,CAAA,EAAE,EPsDG,GAAG,gCAAgC,CAAA,CAAE;EACrD,AOtDE,IAAAkD,EPsDI,kCOtDU,EAACvD,IAAI,EAACH,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,EAAC;EpBUvD,Ea6CE,AOvDsD0D,EpBUpD,CAAC,Ca6CC,AOvDsD,EPuDpD,AOvDqDC,CpBUnC,EAAA,Ua6CL,0BOvDyD,CAACC;EAAS,CAAC,CPwDvF,Ab7CA,AoBXwF,KPwDnF,Cb7CC,Ca6CC;AOvDX,EPuDyB,CACtB,GAAG,Ab7CA,cAAc,EAAE,ea6Ce,CAAA,CAAE;AOvDvC,EPwDE,EOxDE1D,IPwDI,Ab9Ce,AoBVf,GAAG,IAAIE,MpBUqB,Ca8Cd,Cb9CgB,Ea8Cb,IAAA,sBOxDI,CAAC,GAAG,CAAC,QPwDoB,EAAC,UAAU,GAAG,CAAC,CAAC;AOvDtEG,EPwDE,EOxDE,CAAC,CpBSuC,AoBTtC,CpBSuC,Ca+CrC,aAAa,GAAG,IAAA,sCAAgC,EAClD,aAAa,GAAC,cAAc,CAC/B;EACD,IbjDI,EaiDE,WbjDW,CaiDC,CbjDC,EaiDE,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,SAAS,CAAC;EAChE,MAAM,AblDc,WakDH,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,QAAQ,CAAC;EAC7D,IbnD2B,EamDrB,MAAM,GAAI,WAAW,GAAC,CAAC,GAAK,aAAa,GAAC,CAAE;EAElD,EbrD4B,CACzB,GAAG,IAAI;EaqDV,EbnDE;EaoDF,EbnDE,EamDE,CAAC,CbnDC,CAAC,OAAO,GAAG,IAAI,CAAC,GamDG,CAAC,GbnDG,GAAG,IAAI,CAAC,CamDC,EAAE,IbnDI,GAAG,IamDI,AbnDA,CamDC,AbnDA,YAAY,CAAA,CAAE;EaqDlE,EbpDE,IAAI,CAAC,UAAU,CACX,IAAI,CAAC,UAAU,CAAA,CAAE,EACjB,MAAM,EACN,OAAO,CACV;EaiDH,EbhDE,IAAI,CAAC,SagDS,CbhDC,CACX,Ca+Ca,Gb/CT,Ca+Ca,Ab/CZ,Ga+Ce,CAAA,CAAE,Qb/CJ,CAAA,CAAE,EACpB,MAAM,EACN,IAAI,CAAC,OAAO,CACf;Ea8CH,Eb5CE;Ea6CF,Eb5CE,Ia4CI,Ab5CA,CAAC,UAAU,CAAC,Ea4CE,Eb5CE,Ca4CC,Ab5CA,UAAU,CAAA,Ca4CE,Ab5CA,Ca6C/B,Ab7CgC,Ia6C5B,EACJ,IAAI,EACJ,MAAM,GAAG,IAAA,iDAA2C,EAAC,aAAa,GAAG,CAAC,CAAC,CAC1E;EACD,Eb/CE,Ea+CE,cAAc,EAAE;IAClB,Ab/CA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,Ca+CC,CAAC,IAAI,EAAE,Eb/CE,CAAA,Ca+CE,Ab/CA,CAAC,Ca+CC,OAAO,CAAC;Ib7C1C;Aa+CJ,Ib9CI,OAAO,IAAI,CAAC,OAAO;AagDvB,Eb/CE;;AACD,IAAA,QAAA,GAAA,OAAA,CAAA,OAAA,GAEc,MAAM;;;;;AamDrB,SAAS,wBAAwB,CAC7B,IAAqC,EACrC,eAAgC,EAChC,OAA+B,EAAA;EAEjC;EACA,eAAe,GAAG,EAAE;EAEpB;;;EAGA,eAAe,CAAC,OAAO,CAAE,KAAK,IAAI;IAChC,eAAe,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,eAAe;IAChE,qBAAqB,CAAC,IAAI,EAAE,eAAe,EAAE,OAAO,CAAC;EACvD,CAAC,CAAC;EAEF;;;EAGA,eAAe,CAAC,OAAO,CAAE,KAAK,IAAI;IAChC,cAAc,GAAG,KAAK;IACtB,qBAAqB,CAAC,IAAI,EAAE,eAAe,EAAE,OAAO,CAAC;EACvD,CAAC,CAAC;EAEF;EACA,qBAAqB,CAAC,IAAI,EAAE,eAAe,EAAE,OAAO,CAAC;AACvD;AAAC,IAAA,QAAA,GAAA,OAAA,CAAA,OAAA,GAEc,wBAAwB","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["import {Theme} from './types';\n\nconst theme: Theme = {\n  radius: 30,\n  growthAndShrinkTimes: 1.25,\n  leafNodeSpace: 75,\n  lineHeight: 90,\n  fontSize: 10,\n  textFont: 'Poppins',\n  strokeColor: '#f56042',\n  colorArray: [\n    {bgColor: '#fff2e0', borderColor: '#f56042'},\n  ],\n};\n\n/**\n * Set the user defined theme if required\n *\n * @param {Theme} userDefinedTheme\n */\nexport function setTheme(userDefinedTheme: Partial<Theme>) {\n  const {\n    radius = theme.radius,\n    growthAndShrinkTimes = theme.growthAndShrinkTimes,\n    leafNodeSpace = theme.leafNodeSpace,\n    lineHeight = theme.lineHeight,\n    colorArray = theme.colorArray,\n    textFont = theme.textFont,\n    strokeColor = theme.strokeColor,\n    fontSize = theme.fontSize,\n  } = userDefinedTheme;\n\n  theme.radius = radius;\n  theme.growthAndShrinkTimes = growthAndShrinkTimes;\n  theme.leafNodeSpace = leafNodeSpace;\n  theme.lineHeight = lineHeight;\n  theme.colorArray = colorArray;\n  theme.textFont = textFont;\n  theme.strokeColor = strokeColor;\n  theme.fontSize = fontSize;\n}\n\nexport default theme;\n\n","import {CanvasComponent} from '..';\nimport theme from '../config/theme';\nimport {CircleColorSettings} from '../config/types';\nimport {RadiusSettings} from './types';\n\n/**\n * Rate at which circle will grow or shrink\n */\nconst growthRate = 0.3;\n\n/**\n * Describes a circle in the canvas\n */\nclass Circle {\n  /**\n   * Radius of the circle\n   */\n  private radiusSettings: RadiusSettings\n\n  /**\n   * The colorId of the circle\n   */\n  private colorId: string = ''\n\n  /**\n   * Color of the circle\n   */\n  private colorSettings: CircleColorSettings\n\n  /**\n   * Value to be displayed inside the circle\n   */\n  private value: string\n\n  /**\n   * X Position of the circle\n   */\n  private x: number = -1\n\n  /**\n   * Y Position of the circle\n   */\n  private y: number = -1\n\n  /**\n   * For constructing a new circle\n   *\n   * @param {string} value\n   * @param {number} radius\n   * @param {CircleColorSettings} colorSettings\n   */\n  constructor(\n      value: string,\n      radius: number,\n      colorSettings: CircleColorSettings,\n  ) {\n    this.value = value;\n    this.colorSettings = colorSettings;\n    this.radiusSettings = {\n      currentRadius: radius,\n      originalRadius: radius,\n      maxRadius: radius * theme.growthAndShrinkTimes,\n      minRadius: radius / theme.growthAndShrinkTimes,\n    };\n  }\n\n  /**\n   * Draw the circle\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   * @param {number} radius\n   * @param {string} color\n   */\n  private drawCircle(\n      ctx: CanvasRenderingContext2D,\n      radius: number,\n      color: string,\n  ) {\n    const {x, y} = this;\n\n    ctx.beginPath();\n    ctx.fillStyle = color;\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.fill();\n  }\n\n  /**\n   * Draw the border\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private drawBorder(ctx: CanvasRenderingContext2D) {\n    const {x, y, colorSettings, radiusSettings: {currentRadius: radius}} = this;\n    const {borderColor} = colorSettings;\n\n    ctx.arc(x, y, radius, 0, Math.PI * 2, false);\n    ctx.strokeStyle = borderColor;\n    ctx.stroke();\n  }\n\n  /**\n   * Write the text\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  private writeText(ctx: CanvasRenderingContext2D) {\n    const {x, y, value, colorSettings} = this;\n    const {borderColor} = colorSettings;\n\n    // Decide font size\n    const fontSize = `${theme.fontSize}pt`;\n    const ySpacing = theme.fontSize/2;\n\n    ctx.fillStyle = borderColor;\n    ctx.font = `${fontSize} ${theme.textFont}`;\n    ctx.textAlign = 'center';\n    ctx.fillText(value, x, y + ySpacing);\n  }\n\n  /**\n   * Get the current radius\n   *\n   * @return {number}\n   */\n  getRadius() {\n    const {\n      radiusSettings: {currentRadius: radius},\n    } = this;\n    return radius;\n  }\n\n  /**\n   * Increase radius of the circle\n   * @param {number} maxRadius\n   * @return {boolean} - Weather size was changed\n   */\n  grow(maxRadius = this.radiusSettings.maxRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius < maxRadius) {\n      const originalIncreasedRadius = currentRadius + growthRate;\n      this.radiusSettings.currentRadius = originalIncreasedRadius > maxRadius ?\n      maxRadius : originalIncreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Decrease the radius of the circle\n   * @param {number} minRadius\n   * @return {boolean} - Weather size was changed\n   */\n  shrink(minRadius = this.radiusSettings.minRadius) {\n    const {\n      radiusSettings: {\n        currentRadius,\n      },\n    } = this;\n\n    if (currentRadius > minRadius) {\n      const originalDecreasedRadius = currentRadius - growthRate;\n      this.radiusSettings.currentRadius = originalDecreasedRadius < minRadius ?\n      minRadius : originalDecreasedRadius;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Bring the circle back to its original radius\n   * @return {boolean} - Weather size was changed\n   */\n  restoreCircle() {\n    const {\n      radiusSettings: {\n        currentRadius,\n        originalRadius,\n      },\n    } = this;\n\n    if (currentRadius > originalRadius) {\n      return this.shrink(originalRadius);\n    }\n\n    if (currentRadius < originalRadius) {\n      return this.grow(originalRadius);\n    }\n\n    return false;\n  }\n\n  /**\n   * Set the color id of the circle\n   *\n   * @param {string} colorId\n   */\n  setColorId(colorId: string) {\n    this.colorId = colorId;\n  }\n\n  /**\n   * Set the x and y coordinates of the circle\n   *\n   * @param {number} x\n   * @param {number} y\n   */\n  setCoordinates(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Draw the circle on the screen\n   * Draw the border\n   * Add the text\n   *\n   * @param {CanvasComponent} comp\n   * @return {string} - The color id represented by the unique color\n   */\n  draw(comp: CanvasComponent) {\n    const {\n      radiusSettings: {currentRadius: radius},\n      colorSettings: {bgColor},\n    } = this;\n\n    // Draw circle\n    this.colorId = this.colorId ? this.colorId : comp.getNextColor();\n    this.drawCircle(\n        comp.getContext(),\n        radius,\n        bgColor,\n    );\n    this.drawCircle(\n        comp.getHitContext(),\n        radius,\n        this.colorId,\n    );\n\n    // Draw border\n    this.drawBorder(comp.getContext());\n\n    // Write text\n    this.writeText(comp.getContext());\n\n    // Return the colorId\n    return this.colorId;\n  }\n}\n\nexport default Circle;\n","import {CircleColorSettings} from '../config/types';\nimport theme from '../config/theme';\n\n/**\n * Get a random color settings\n *\n * @return {CircleColorSettings}\n */\nfunction getRandomColor():CircleColorSettings {\n  const {colorArray} = theme;\n  return colorArray[Math.floor(Math.random() * colorArray.length)];\n}\n\nexport default getRandomColor;\n","import Circle from '../shapes/Circle';\nimport theme from '../config/theme';\nimport getRandomColor from '../utils/getRandomColor';\n\n/**\n * Describes a node of a binary tree\n */\nclass BinaryTreeNode<T extends string | number> {\n  /**\n   * The value of the node\n   */\n  value: T\n\n  /**\n   * The canvas circle\n   */\n  nodeCircle: Circle\n\n  /**\n   * The left child of the node\n   */\n  left?: BinaryTreeNode<T>\n\n  /**\n   * The right child of the node\n   */\n  right?: BinaryTreeNode<T>\n\n  /**\n   * For constructing a new binary tree node\n   *\n   * @param {T} value\n   */\n  constructor(value: T) {\n    this.value = value;\n    this.nodeCircle = new Circle(\n        `${value}`,\n        theme.radius,\n        getRandomColor(),\n    );\n  }\n\n  /**\n   * Set the left child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setLeft(value: BinaryTreeNode<T>) {\n    this.left = value;\n  }\n\n  /**\n   * Set the right child\n   *\n   * @param {BinaryTreeNode} value\n   */\n  setRight(value: BinaryTreeNode<T>) {\n    this.right = value;\n  }\n\n  /**\n   * Get the height of the binry tree from the node\n   * Height of root is 1\n   *\n   * @return {number}\n   */\n  getHeight():number {\n    const leftHeight = this.left?.getHeight() || 0;\n    const rightHeight = this.right?.getHeight() || 0;\n    return Math.max(leftHeight, rightHeight) + 1;\n  }\n}\n\nexport default BinaryTreeNode;\n","import BinaryTreeNode from './BinaryTreeNode';\n\n/**\n * A Binary search tree node\n */\nclass BinarySearchTreeNode<T extends string | number>\n  extends BinaryTreeNode<T> {\n    /**\n     * Left child of the node\n     */\n    left?: BinarySearchTreeNode<T>\n\n    /**\n     * Right child of the node\n     */\n    right?: BinarySearchTreeNode<T>\n\n    /**\n     * Set the left child of the node\n     *\n     * @param {BinarySearchTreeNode<T>} value\n     */\n    setLeft(value: BinarySearchTreeNode<T>) {\n      super.setLeft(value);\n    }\n\n    /**\n     * Set the right child of the node\n     *\n     * @param {BinarySearchTreeNode<T>} value\n     */\n    setRight(value: BinarySearchTreeNode<T>) {\n      super.setRight(value);\n    }\n\n    /**\n     * Insert a value into the node\n     * (Using Recursion)\n     *\n     * @param {T} value\n     */\n    insert(value: T) {\n      // Skip equal value\n      if (value === this.value) {\n        return;\n      }\n\n      // When value is lesser\n      if (value < this.value) {\n        if (this.left) {\n          this.left.insert(value);\n          return;\n        }\n        this.setLeft(new BinarySearchTreeNode(value));\n        return;\n      }\n\n      // When value is greater\n      if (this.right) {\n        this.right.insert(value);\n        return;\n      }\n      this.setRight(new BinarySearchTreeNode(value));\n    }\n\n    /**\n     * Find the minimum value from the given node\n     *\n     * @param {BinarySearchTreeNode<T>} node\n     * @return {BinarySearchTreeNode<T>}\n     */\n    findMinimum():BinarySearchTreeNode<T> {\n      if (this.left) {\n        return this.left.findMinimum();\n      }\n      return this;\n    }\n\n    /**\n     * Delete this node\n     *\n     * @param {BinarySearchTreeNode<T>} parent\n     * @return {[\n     *  BinarySearchTreeNode<T>,\n     *  BinarySearchTreeNode<T>\n     * ]} [deletedNode, currentRoot]\n     */\n    deleteThisNode(\n        parent?: BinarySearchTreeNode<T>,\n    ): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?] {\n      // Which direction is this node from the parent\n      const childDirection = parent?.left === this ? 'left' : 'right';\n\n      // Case 1: Delete leaf node\n      if (!this.left && !this.right) {\n        if (parent) {\n          delete parent[childDirection];\n        }\n        return [this];\n      }\n\n      // Case 2: Delete when there is only one child\n      if (this.left && !this.right) {\n        if (parent) {\n          parent[childDirection] = this.left;\n        }\n        return [this, this.left];\n      } else if (this.right && !this.left) {\n        if (parent) {\n          parent[childDirection] = this.right;\n        }\n        return [this, this.right];\n      }\n\n      // Case 3: There are 2 children\n\n      // Step 1: Delete the in order successor\n      const [deletedNode] = this.right!.delete(\n        this.right!.findMinimum().value, this,\n      );\n\n      // Step 2: Set the in order successor as the current node\n      // Deleted node will always be found\n      deletedNode!.left = this.left;\n      deletedNode!.right = this.right;\n      if (parent) {\n        parent[childDirection] = deletedNode;\n      }\n\n      return [this, deletedNode];\n    }\n\n    /**\n     * Delete a node\n     * (Using recursion)\n     *\n     * @param {T} value\n     * @param {BinarySearchTreeNode<T>} parent\n     * @return {[\n     *  BinarySearchTreeNode<T>,\n     *  BinarySearchTreeNode<T>\n     * ]} [deletedNode, currentRoot]\n     */\n    delete(\n        value: T,\n        parent?: BinarySearchTreeNode<T>,\n    ): [BinarySearchTreeNode<T>?, BinarySearchTreeNode<T>?] {\n      // Delete from left node\n      if (value < this.value && this.left) {\n        const [deletedNode] = this.left.delete(value, this);\n        return [deletedNode, this];\n      }\n\n      // Delete from right node\n      if (value > this.value && this.right) {\n        const [deletedNode] = this.right.delete(value, this);\n        return [deletedNode, this];\n      }\n\n      // Delete the current node\n      if (this.value === value) {\n        const res = this.deleteThisNode(parent);\n        delete this.left;\n        delete this.right;\n        return res;\n      }\n\n      return [, this];\n    }\n}\n\nexport default BinarySearchTreeNode;\n","import BinaryTreeNode from './BinaryTreeNode';\nimport BinarySearchTreeNode from './BinarySearchTreeNode';\n\nexport {\n  BinaryTreeNode,\n  BinarySearchTreeNode,\n};\n","/**\n * Get RGB string from red green and blue values\n *\n * @param {number} red\n * @param {number} green\n * @param {number} blue\n * @return {string}\n */\nfunction getRGBString(red: number, green: number, blue: number) {\n  return `rgb(${red}, ${green}, ${blue})`;\n}\n\nexport default getRGBString;\n","import getRGBString from '../utils/getRGBString';\n\n/**\n * The gap between 2 ids\n */\nconst gap = 10;\n\n/**\n * For generating color\n */\nclass ColorGenerator {\n  /**\n   * The red color value\n   */\n  private red = 0\n\n  /**\n   * The green color value\n   */\n  private green = 0\n\n  /**\n   * The blue color value\n   */\n  private blue = 1\n\n  /**\n   * Increment a color\n   *\n   * @param {'red' | 'green' | 'blue'} color\n   */\n  incrementColor(color: 'red' | 'green' | 'blue') {\n    this[color] = (this[color] + gap) % 256;\n  }\n\n  /**\n   * Get the next color\n   * Starts from rgb(0, 0, 0)\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    // Generate the rgb value\n    const color = getRGBString(this.red, this.green, this.blue);\n\n    // Increment the color\n    this.incrementColor('blue');\n    if (this.blue < gap) {\n      this.incrementColor('green');\n      if (this.green < gap) {\n        this.incrementColor('red');\n      }\n    }\n\n    // Return the color\n    return color;\n  }\n}\n\nexport default ColorGenerator;\n","import ColorGenerator from '../helpers/ColorGenerator';\nimport getRGBString from '../utils/getRGBString';\nimport {GetColorCallBack} from './types';\n\n/**\n * Defines one canvas\n */\nclass CanvasComponent {\n  /**\n   * The canvas element\n   */\n  private $el: HTMLCanvasElement\n\n  /**\n   * This is a hidden canvas element\n   * which is used to redraw all the elements from the canvas\n   * in unique colors.\n   *\n   * This way an element can be easily identified from this hit canvas\n   * just by using the color in O(1)\n   *\n   * Otherwise to identify an element in the canvas it will take O(n)\n   *\n   */\n  private $hitEl: HTMLCanvasElement\n\n  /**\n   * The color generator for generating new color\n   */\n  private colorGenerator: ColorGenerator\n\n  /**\n   * The current hovering color\n   */\n  private currentHoveringColor: string = ''\n\n  /**\n   * For storing the on hover callback\n   */\n  private onHoverCB?: (event: MouseEvent) => void\n\n  /**\n   * For storing the on click callback\n   */\n  private onClickCB?: (event: MouseEvent) => void\n\n  /**\n   * For constructing a new canvas component\n   *\n   * @param {HTMLCanvasElement} $el\n   */\n  constructor($el: HTMLCanvasElement) {\n    const $hitEl = document.createElement('canvas');\n\n    this.$el = $el;\n    this.$hitEl = $hitEl;\n    this.colorGenerator = new ColorGenerator();\n  }\n\n  /**\n   * Clears the canvas\n   */\n  clearCanvas() {\n    const {height, width} = this.$el;\n    this.getContext().clearRect(0, 0, width, height);\n  }\n\n  /**\n   * Set the maximum width and height\n   *\n   * @param {number} height\n   * @param {number} width\n   */\n  setMaxWidthAndHeight(height: number, width: number) {\n    this.$hitEl.height = this.$el.height = height;\n    this.$hitEl.width = this.$el.width = width;\n  }\n\n  /**\n   * Get the hit 2d context\n   *\n   * @return {CanvasComponent}\n   */\n  getHitContext(): CanvasRenderingContext2D {\n    const ctx = this.$hitEl.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the 2d context\n   *\n   * @return {CanvasRenderingContext2D}\n   */\n  getContext(): CanvasRenderingContext2D {\n    const ctx = this.$el.getContext('2d');\n    if (!ctx) {\n      throw new Error('Cannot get 2d context');\n    }\n\n    return ctx;\n  }\n\n  /**\n   * Get the next color from the color generator\n   *\n   * @return {string}\n   */\n  getNextColor() {\n    return this.colorGenerator.getNextColor();\n  }\n\n  /**\n   * On hover get the canvas hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onHover(cb: GetColorCallBack) {\n    // Clear previous listeners\n    if (this.onHoverCB) {\n      this.$el.removeEventListener('mousemove', this.onHoverCB);\n    }\n\n    // Set the callback\n    this.onHoverCB = (event: MouseEvent) => {\n      const {pageX, pageY} = event;\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n\n      // Callback should only be called on color change\n      const color = getRGBString(pixel[0], pixel[1], pixel[2]);\n      if (this.currentHoveringColor !== color) {\n        this.currentHoveringColor = color;\n        cb(color);\n      }\n    };\n\n    // Add the event listener\n    this.$el.addEventListener('mousemove', this.onHoverCB);\n  }\n\n  /**\n   * On click of canvas get the hit color\n   *\n   * @param {GetColorCallBack} cb\n   */\n  onClick(cb: GetColorCallBack) {\n    // Clear previous listeners\n    if (this.onClickCB) {\n      this.$el.removeEventListener('click', this.onClickCB);\n    }\n\n    // Set the callback\n    this.onClickCB = (event: MouseEvent) => {\n      const {pageX, pageY} = event;\n      console.log(pageX, pageY);\n      const {data: pixel} = this.getHitContext().getImageData(\n          pageX - this.$el.offsetLeft,\n          pageY - this.$el.offsetTop,\n          1, 1,\n      );\n      cb(getRGBString(pixel[0], pixel[1], pixel[2]));\n    };\n\n    // Add the event listener\n    this.$el.addEventListener('click', this.onClickCB);\n  }\n}\n\nexport default CanvasComponent;\n\n\n","export enum VisualizationType {\n  SIMPLE,\n  PRETTY,\n  EXPANDABLE,\n  HIGHLIGHT\n}\n","import theme from '../config/theme';\n\n/**\n * Get the max number of leaf nodes from height of the binary tree\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - Maximum number of leaf nodes\n */\nexport function getMaxLeafNodesFromHeight(treeHeight: number) {\n  return 2 ** (treeHeight-1);\n}\n\n/**\n * Maximum canvas width required from number of tree nodes\n *\n * @param {number} maxNodes - Maximum number of nodes\n * @return {number} - The max width required\n */\nexport function getCanvasWidthFromMaxNodeSpacing(maxNodes: number) {\n  return (maxNodes + 2) * theme.leafNodeSpace;\n}\n\n/**\n * Get the x position from given horizontal node position\n *\n * @param {number} nodes - The number of nodes from the left\n * @return {number} - The x position\n */\nexport function getXPositionFromGivenHorizontalNodePosition(nodes: number) {\n  return (nodes) * theme.leafNodeSpace;\n}\n\n/**\n * Get canvas height from the tree height\n *\n * @param {number} treeHeight - Height of the tree (number of nodes from)\n * @return {number} - The canvas height in px\n */\nexport function getCanvasHeightFromTreeHeight(treeHeight: number) {\n  return (treeHeight) * theme.lineHeight;\n}\n\n/**\n * Get required and actual height and width\n *\n * @param {number} maxNodeSpacing\n * @param {number} heightOfTree\n * @param {number} maxWidth\n * @param {number} maxHeight\n * @return {{\n *  maxCanvasHeightRequired: number,\n *  maxCanvasWidthRequired:number,\n *  actualMaxHeight: number,\n *  actualMaxWidth: number\n * }}\n */\nexport function getRequiredAndActualHeightAndWidth(\n    maxNodeSpacing: number,\n    heightOfTree: number,\n    maxWidth: number,\n    maxHeight: number,\n) {\n  const maxCanvasWidthRequired = getCanvasWidthFromMaxNodeSpacing(\n      maxNodeSpacing,\n  );\n  const maxCanvasHeightRequired = getCanvasHeightFromTreeHeight(heightOfTree+1);\n  const actualMaxWidth = maxCanvasWidthRequired > maxWidth ?\n    maxCanvasWidthRequired : maxWidth;\n  const actualMaxHeight = maxCanvasHeightRequired > maxHeight ?\n    maxCanvasHeightRequired : maxHeight;\n\n  return {\n    maxCanvasHeightRequired,\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  };\n}\n","import {Point} from '../types/Point';\n\n/**\n * Describes a bezier curve\n */\nclass BezierCurve {\n  /**\n   * X Configurations\n   */\n  xStart: number\n  cp1x: number\n  cp2x: number\n  xEnd: number\n\n  /**\n   * Y Configurations\n   */\n  yStart: number\n  cp1y: number\n  cp2y: number\n  yEnd: number\n\n  /**\n   * Color of the curve\n   */\n  color: string\n\n  /**\n   * Construct a new bezier curve\n   *\n   * @param {string} color\n   * @param {Point} start\n   * @param {Point} cp1\n   * @param {Point} cp2\n   * @param {Point} end\n   */\n  constructor(\n      color: string,\n      start: Point,\n      cp1: Point,\n      cp2: Point,\n      end: Point,\n  ) {\n    const {x: xStart, y: yStart} = start;\n    const {x: cp1x, y: cp1y} = cp1;\n    const {x: cp2x, y: cp2y} = cp2;\n    const {x: xEnd, y: yEnd} = end;\n\n    this.color = color;\n    this.xStart = xStart;\n    this.yStart = yStart;\n    this.cp1x = cp1x;\n    this.cp1y = cp1y;\n    this.cp2x = cp2x;\n    this.cp2y = cp2y;\n    this.xEnd = xEnd;\n    this.yEnd = yEnd;\n  }\n\n  /**\n   * Draw the bezier curve\n   *\n   * @param {CanvasRenderingContext2D} ctx\n   */\n  draw(ctx: CanvasRenderingContext2D) {\n    ctx.beginPath();\n    ctx.moveTo(this.xStart, this.yStart);\n    ctx.strokeStyle = this.color;\n    ctx.bezierCurveTo(\n        this.cp1x,\n        this.cp1y,\n        this.cp2x,\n        this.cp2y,\n        this.xEnd,\n        this.yEnd,\n    );\n    ctx.stroke();\n  }\n}\n\n\nexport default BezierCurve;\n","import CanvasComponent from '../canvas/Canvas';\nimport theme from '../config/theme';\nimport BezierCurve from '../strokes/BezierCurve';\nimport {\n  HorizontalStartAndEndInput,\n  VerticalStartAndEndInput,\n} from '../canvas/types';\n\n/**\n * Connect two points with a bezier curve\n *\n * @param {CanvasComponent} canvasComponent\n * @param {HorizontalStartAndEndInput} horizontalConfig\n * @param {VerticalStartAndEndInput} verticalConfig\n */\nfunction connectPointsWithBezierCurve(\n    canvasComponent: CanvasComponent,\n    horizontalConfig: HorizontalStartAndEndInput,\n    verticalConfig: VerticalStartAndEndInput,\n) {\n// X, Y Calculation\n  const {xStart, xEnd} = horizontalConfig;\n  const {yStart, yEnd} = verticalConfig;\n  const halfY = (yStart + yEnd) / 2;\n  const halfX = (xStart + xEnd) / 2;\n\n  // Draw the bezier curve\n  const berzierCurve = new BezierCurve(\n      theme.strokeColor,\n      {x: xStart, y: yStart},\n      {x: halfX, y: halfY},\n      {x: xEnd, y: halfY},\n      {x: xEnd, y: yEnd},\n  );\n  berzierCurve.draw(canvasComponent.getContext());\n}\n\nexport default connectPointsWithBezierCurve;\n","import CanvasComponent from './Canvas';\nimport theme from '../config/theme';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {Point} from '../types/Point';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getRequiredAndActualHeightAndWidth,\n  getXPositionFromGivenHorizontalNodePosition,\n} from '../utils/tree';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\nimport {\n  IndividualInputOptions,\n  LeftAndRightSpacing,\n} from './types';\n\n/**\n * The current animation frame that is going on\n */\nlet animationFrameId: number;\n\n/**\n * Current color that is being hovered on\n */\nlet hoveredColorId: string;\n\n/**\n * Spacing map for storing space requirements\n */\nlet spacingMap: Map<BinaryTreeNode<string | number>, LeftAndRightSpacing>;\n\n/**\n * Clear the existing animation frame if any and request an animation frame\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {Point} position\n * @param {boolean} highlightMode\n */\nfunction requestAnimationFrame(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n) {\n  // Clear existing animation frame\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n  }\n\n  // Request a new one\n  animationFrameId = window.requestAnimationFrame(() => {\n    canvasComponent.clearCanvas();\n    const requiredRedraw = recursivelyDrawNodes(\n        root, canvasComponent, position, highlightMode);\n    if (requiredRedraw) {\n      requestAnimationFrame(root, canvasComponent, position, highlightMode);\n    }\n  });\n}\n\n/**\n * Draw single node\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {Point} position\n * @param {boolean} highlightMode\n * @return {boolean} Weather redraw is required\n */\nfunction drawSingleNode(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n) {\n  const {x, y} = position;\n  node.nodeCircle.setCoordinates(x, y);\n\n  // Grow or shrink while hover\n  const colorId = node.nodeCircle.draw(comp);\n  if (colorId === hoveredColorId && highlightMode) {\n    return node.nodeCircle.grow();\n  } else {\n    return node.nodeCircle.restoreCircle();\n  }\n}\n\n/**\n * Recursively draw all the nodes for a pretty tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {Point} position\n * @param {boolean} highlightMode\n * @return {boolean}\n */\nfunction recursivelyDrawNodes(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    position: Point,\n    highlightMode: boolean,\n): boolean {\n  const {x: xPosition, y: yPosition} = position;\n\n  // Draw the node\n  let requiredRedraw = drawSingleNode(\n      root,\n      canvasComponent,\n      {x: xPosition, y: yPosition},\n      highlightMode,\n  );\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent);\n\n  // Root spacings\n  const {left, right} = spacingMap.get(root)!;\n\n  // Draw the left child\n  if (root.left) {\n    const leftOfLeft = spacingMap.get(root.left)!.left;\n    const childYPosition = yPosition + theme.lineHeight;\n    const leftPosition = {\n      x: xPosition - getXPositionFromGivenHorizontalNodePosition(\n          left - leftOfLeft,\n      ),\n      y: childYPosition,\n    };\n\n    requiredRedraw = recursivelyDrawNodes(\n        root.left,\n        canvasComponent,\n        leftPosition,\n        highlightMode,\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: leftPosition.x,\n    }, {\n      yStart: yPosition + root.nodeCircle.getRadius(),\n      yEnd: childYPosition - root.left.nodeCircle.getRadius(),\n    });\n  }\n\n  // Draw the right child\n  if (root.right) {\n    const rightOfRight = spacingMap.get(root.right)!.right;\n    const childYPosition = yPosition + theme.lineHeight;\n    const rightPosition = {\n      x: xPosition + getXPositionFromGivenHorizontalNodePosition(\n          right - rightOfRight,\n      ),\n      y: childYPosition,\n    };\n\n    requiredRedraw = recursivelyDrawNodes(\n        root.right,\n        canvasComponent,\n        rightPosition,\n        highlightMode,\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: rightPosition.x,\n    }, {\n      yStart: yPosition + root.nodeCircle.getRadius(),\n      yEnd: childYPosition - root.right.nodeCircle.getRadius(),\n    });\n  }\n\n  return requiredRedraw;\n}\n\n/**\n * Calculates the spacing required recursively\n *\n * @param {BinaryTreeNode<string | number>} root\n * @return {number} - The spacing requirement of that node\n */\nfunction calculateSpacingMapRecursively(\n    root: BinaryTreeNode<string | number>,\n): number {\n  const left = root.left ? calculateSpacingMapRecursively(\n      root.left,\n  ) + 0.5: 0;\n  const right = root.right ? calculateSpacingMapRecursively(\n      root.right,\n  ) + 0.5: 0;\n  spacingMap.set(root, {\n    left,\n    right,\n  });\n\n  return left + right;\n}\n\n/**\n * Draw a pretty binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {IndividualInputOptions} options\n */\nfunction drawPrettyBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  spacingMap = new Map();\n  const maxNodeSpacing = calculateSpacingMapRecursively(root);\n  const heightOfTree = root.getHeight();\n  const {maxHeight, maxWidth, highlightMode} = options;\n\n  // Calculate canvas spacing requirements\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  } = getRequiredAndActualHeightAndWidth(\n      maxNodeSpacing,\n      heightOfTree,\n      maxWidth,\n      maxHeight,\n  );\n\n  // Init calculation\n  const left = spacingMap.get(root)!.left;\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = (midPointInCanvas - maxCanvasWidthRequired / 2);\n\n  // Initialize the canvas\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth);\n\n  /**\n   * Hover event handler\n   */\n  canvasComponent.onHover((color) => {\n    hoveredColorId = color;\n    requestAnimationFrame(root, canvasComponent, {\n      x: xStart + getXPositionFromGivenHorizontalNodePosition(left+1),\n      y: getCanvasHeightFromTreeHeight(0.5),\n    }, Boolean(highlightMode));\n  });\n\n  // Recursively draw all nodes\n  requestAnimationFrame(root, canvasComponent, {\n    x: xStart + getXPositionFromGivenHorizontalNodePosition(left+1),\n    y: getCanvasHeightFromTreeHeight(0.5),\n  }, Boolean(highlightMode));\n}\n\nexport default drawPrettyBinaryTree;\n","import CanvasComponent from './Canvas';\nimport theme from '../config/theme';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {Point} from '../types/Point';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getCanvasWidthFromMaxNodeSpacing,\n  getXPositionFromGivenHorizontalNodePosition,\n} from '../utils/tree';\nimport {IndividualInputOptions, PathArray} from './types';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\n\n/**\n * The current animation frame that is going on\n */\nlet animationFrameId: number;\n\n/**\n * Array of all children that needs printing\n */\nlet globalPathArray: PathArray;\n\n/**\n * Current color that is being hovered on\n */\nlet hoveredColorId: string;\n\n/**\n * Map storing the colorId to the path array\n */\nlet colorIdToPathMap: Map<string, PathArray> = new Map();\n\n/**\n * Clear the existing animation frame if any and request an animation frame\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} comp\n * @param {IndividualInputOptions} options\n */\nfunction requestAnimationFrame(\n    root: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Clear existing animation frame\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n  }\n\n  // Request a new one\n  animationFrameId = window.requestAnimationFrame(\n      () => animationFrameCB(root, comp, options),\n  );\n}\n\n\n/**\n * Get the node height from print array\n *\n * @return {number}\n */\nfunction getNodeHeightFromGlobalPathArray() {\n  return globalPathArray.length + 1;\n}\n\n\n/**\n * Get the node width from the print array\n *\n * @return {{\n *  left: number,\n *  right: number\n * }}\n */\nfunction getNodeWidthFromGlobalPathArray() {\n  let left = 0;\n  let right = 0;\n  let current = 0;\n\n  for (const childDirection of globalPathArray) {\n    if (childDirection === 'left') {\n      current -= 1;\n    } else {\n      current += 1;\n    }\n    if (current < 0) {\n      left = Math.max(Math.abs(current), left);\n    } else {\n      right = Math.max(current, right);\n    }\n  }\n\n  return {\n    left, right,\n  };\n}\n\n/**\n * Draw single node\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {PathArray} pathArray\n * @param {Point} position\n * @return {boolean} Weather redraw is required\n */\nfunction drawSingleNode(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    pathArray: PathArray,\n    position: Point,\n) {\n  const {x, y} = position;\n  const doesNodeHaveChildren = Boolean(node.left || node.right);\n  node.nodeCircle.setCoordinates(x, y);\n\n  // Grow or shrink while hover\n  const colorId = node.nodeCircle.draw(comp);\n  colorIdToPathMap.set(colorId, pathArray);\n  if (colorId === hoveredColorId && doesNodeHaveChildren) {\n    return node.nodeCircle.grow();\n  } else {\n    return node.nodeCircle.restoreCircle();\n  }\n}\n\n/**\n * Draw both the children if required\n *\n * @param {BinaryTreeNode} node\n * @param {CanvasComponent} comp\n * @param {number} xPosition\n * @param {number} nodeHeight\n * @param {PathArray} pathArray\n * @return {boolean}\n */\nfunction drawChildren(\n    node: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    xPosition: number,\n    nodeHeight: number,\n    pathArray: PathArray,\n) {\n  const currentHeight = getCanvasHeightFromTreeHeight(nodeHeight);\n  const childHeight = getCanvasHeightFromTreeHeight(nodeHeight + 1);\n  let requiredRedraw = false;\n\n  // Draw the left child\n  if (node.left) {\n    const currentPathArray : PathArray = node.left.left || node.left.right ?\n      [...pathArray, 'left'] : [...pathArray];\n    const xLeft = xPosition - (0.5 * theme.leafNodeSpace);\n\n    requiredRedraw = drawSingleNode(\n        node.left,\n        comp,\n        currentPathArray, {\n          x: xLeft,\n          y: childHeight,\n        },\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(comp, {\n      xStart: xPosition,\n      xEnd: xLeft,\n    }, {\n      yStart: currentHeight + node.nodeCircle.getRadius(),\n      yEnd: childHeight - node.left.nodeCircle.getRadius(),\n    });\n  }\n\n  // Draw the right child\n  if (node.right) {\n    const currentPathArray : PathArray = node.right.left || node.right.right ?\n      [...pathArray, 'right'] : [...pathArray];\n    const xRight = xPosition + (0.5 * theme.leafNodeSpace);\n\n    requiredRedraw = drawSingleNode(\n        node.right,\n        comp,\n        currentPathArray, {\n          x: xRight,\n          y: childHeight,\n        },\n    ) || requiredRedraw;\n    connectPointsWithBezierCurve(comp, {\n      xStart: xPosition,\n      xEnd: xRight,\n    }, {\n      yStart: currentHeight + node.nodeCircle.getRadius(),\n      yEnd: childHeight - node.right.nodeCircle.getRadius(),\n    });\n  }\n\n  return requiredRedraw;\n}\n\n\n/**\n * Draw all the nodes by following print array\n *\n * @param {BinaryTreeNode} root\n * @param {CanvasComponent} comp\n * @param {number} xRootPosition\n * @return {boolean} - Weather animated redraw is required\n */\nfunction drawAllNodes(\n    root:BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    xRootPosition: number): boolean {\n  // Draw root\n  let currentNode = root;\n  let xPosition = xRootPosition;\n  let currentNodeHeight = 0.5;\n  const currentPathArray: Array<'left' | 'right'> = [];\n  let requiredRedraw = drawSingleNode(root, comp, [...currentPathArray], {\n    x: xPosition,\n    y: getCanvasHeightFromTreeHeight(currentNodeHeight),\n  });\n\n  // Draw all the children according to the path\n  for (const currentPath of globalPathArray) {\n    requiredRedraw = drawChildren(\n        currentNode,\n        comp,\n        xPosition,\n        currentNodeHeight,\n        currentPathArray,\n    ) || requiredRedraw;\n\n    if (currentPath === 'left') {\n      currentNode = currentNode.left!;\n      xPosition = xPosition - (0.5 * theme.leafNodeSpace);\n      currentPathArray.push('left');\n    } else {\n      currentNode = currentNode.right!;\n      xPosition = xPosition + (0.5 * theme.leafNodeSpace);\n      currentPathArray.push('right');\n    }\n    currentNodeHeight += 1;\n  }\n\n  // Draw the children of the last element in the path\n  requiredRedraw = drawChildren(\n      currentNode,\n      comp,\n      xPosition,\n      currentNodeHeight,\n      currentPathArray,\n  ) || requiredRedraw;\n\n  // Return if redraw is required\n  return requiredRedraw;\n}\n\n/**\n * Animation frame call back function that will recursively be called.\n * In case animation is required\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} comp\n * @param {IndividualInputOptions} options\n */\nfunction animationFrameCB(\n    root: BinaryTreeNode<string | number>,\n    comp: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Height and width calculations\n  const nodeHeight = getNodeHeightFromGlobalPathArray();\n  const {\n    left: leftNodeWidth,\n    right: rightNodeWidth,\n  } = getNodeWidthFromGlobalPathArray();\n  const requiredHeight = getCanvasHeightFromTreeHeight(nodeHeight + 1);\n  const requiredWidth = getCanvasWidthFromMaxNodeSpacing(\n      leftNodeWidth+rightNodeWidth,\n  );\n  const actualHeight = Math.max(requiredHeight, options.maxHeight);\n  const actualWidth = Math.max(requiredWidth, options.maxWidth);\n  const xStart = (actualWidth/2) - (requiredWidth/2);\n\n  // Set the height and width\n  // This also clears the canvas. So no need to clear it manually.\n  comp.setMaxWidthAndHeight(actualHeight, actualWidth);\n\n  // Initialize color id to path map\n  colorIdToPathMap = new Map();\n\n  // Draw and check if redraw is required\n  const requiredRedraw = drawAllNodes(\n      root,\n      comp,\n      xStart + getXPositionFromGivenHorizontalNodePosition(leftNodeWidth + 1),\n  );\n  if (requiredRedraw) {\n    requestAnimationFrame(root, comp, options);\n  }\n}\n\n/**\n * Draw an expandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {IndividualInputOptions} options\n */\nfunction drawExpandableBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  // Initialization\n  globalPathArray = [];\n\n  /**\n   * Click event handler\n   */\n  canvasComponent.onClick((color) => {\n    globalPathArray = colorIdToPathMap.get(color) || globalPathArray;\n    requestAnimationFrame(root, canvasComponent, options);\n  });\n\n  /**\n   * Hover event handler\n   */\n  canvasComponent.onHover((color) => {\n    hoveredColorId = color;\n    requestAnimationFrame(root, canvasComponent, options);\n  });\n\n  // Draw frame\n  requestAnimationFrame(root, canvasComponent, options);\n}\n\nexport default drawExpandableBinaryTree;\n","import CanvasComponent from './Canvas';\nimport BinaryTreeNode from '../tree/BinaryTreeNode';\nimport theme from '../config/theme';\nimport {\n  getCanvasHeightFromTreeHeight,\n  getMaxLeafNodesFromHeight,\n  getRequiredAndActualHeightAndWidth,\n} from '../utils/tree';\nimport {\n  HorizontalStartAndEndInput,\n  IndividualInputOptions,\n} from './types';\nimport connectPointsWithBezierCurve\n  from '../utils/connectPointsWithBezierCurve';\n\n/**\n * Recursively draw all the nodes\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {number} currentLine\n * @param {HorizontalStartAndEndInput} horizontalConfig\n */\nfunction recursivelyDrawNodes(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    currentLine: number,\n    horizontalConfig: HorizontalStartAndEndInput,\n) {\n  // X Calculation\n  const {xStart, xEnd} = horizontalConfig;\n  const xPosition = (xStart + xEnd) / 2;\n\n  // Y Calculation\n  const yPosition = currentLine * theme.lineHeight;\n\n  // Draw the node\n  root.nodeCircle.setCoordinates(xPosition, yPosition);\n  root.nodeCircle.draw(canvasComponent);\n\n\n  // Draw the left child nodes\n  // Radius is added and subtracted from y to move the line outside the circle\n  if (root.left) {\n    recursivelyDrawNodes(root.left, canvasComponent, currentLine+1, {\n      xStart,\n      xEnd: xPosition,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xStart + xPosition) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n\n  if (root.right) {\n    recursivelyDrawNodes(root.right, canvasComponent, currentLine+1, {\n      xStart: xPosition,\n      xEnd,\n    });\n    connectPointsWithBezierCurve(canvasComponent, {\n      xStart: xPosition,\n      xEnd: (xPosition + xEnd) / 2,\n    }, {\n      yStart: yPosition + theme.radius,\n      yEnd: getCanvasHeightFromTreeHeight(currentLine + 1) - theme.radius,\n    });\n  }\n}\n\n/**\n * Draw an expandable binary tree\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {CanvasComponent} canvasComponent\n * @param {IndividualInputOptions} options\n */\nfunction drawSimpleBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasComponent: CanvasComponent,\n    options: IndividualInputOptions,\n) {\n  const heightOfTree = root.getHeight();\n  const maxNumberOfLeafNodes = getMaxLeafNodesFromHeight(heightOfTree);\n  const {maxHeight, maxWidth} = options;\n\n  // Max height and width requirements\n  const {\n    maxCanvasWidthRequired,\n    actualMaxHeight,\n    actualMaxWidth,\n  } = getRequiredAndActualHeightAndWidth(\n      maxNumberOfLeafNodes,\n      heightOfTree,\n      maxWidth,\n      maxHeight,\n  );\n\n  // Init calculation\n  const midPointInCanvas = actualMaxWidth / 2;\n  const xStart = (midPointInCanvas - maxCanvasWidthRequired / 2) +\n  theme.leafNodeSpace;\n  const xEnd = (midPointInCanvas + maxCanvasWidthRequired / 2) -\n  theme.leafNodeSpace;\n\n  // Initialize the canvas\n  canvasComponent.setMaxWidthAndHeight(actualMaxHeight, actualMaxWidth);\n\n  // Recursively draw the tree\n  recursivelyDrawNodes(root, canvasComponent, 0.5, {xStart, xEnd});\n}\n\nexport default drawSimpleBinaryTree;\n","import BinaryTreeNode from '../tree/BinaryTreeNode';\nimport {VisualizationType} from '../enumns/VisualizationType';\nimport drawPrettyBinaryTree from './drawPrettyBinaryTree';\nimport drawExpandableBinaryTree from './drawExpandableBinaryTree';\nimport drawSimpleBinaryTree from './drawSimpleBinaryTree';\nimport {MainInputOptions} from './types';\nimport CanvasComponent from './Canvas';\n\n// For keeping track of canvas components for canvas elements\nconst canvasMap: Map<HTMLCanvasElement, CanvasComponent> = new Map();\n\n/**\n * Draw a binary tree in one of the given types\n *\n * @param {BinaryTreeNode<string | number>} root\n * @param {HTMLCanvasElement} canvasElement\n * @param {Partial<MainInputOptions>} options\n */\nfunction drawBinaryTree(\n    root: BinaryTreeNode<string | number>,\n    canvasElement: HTMLCanvasElement,\n    options: Partial<MainInputOptions> = {},\n) {\n  const {\n    type = VisualizationType.SIMPLE,\n    maxHeight = window.innerHeight,\n    maxWidth = window.innerWidth,\n  } = options;\n\n  const canvasComponent = canvasMap.get(canvasElement) ||\n  new CanvasComponent(canvasElement);\n  canvasMap.set(canvasElement, canvasComponent);\n\n  switch (type) {\n    case VisualizationType.PRETTY:\n      drawPrettyBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.EXPANDABLE:\n      drawExpandableBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n\n    case VisualizationType.HIGHLIGHT:\n      drawPrettyBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n        highlightMode: true,\n      });\n      break;\n\n    default:\n      drawSimpleBinaryTree(root, canvasComponent, {\n        maxHeight,\n        maxWidth,\n      });\n      break;\n  }\n}\n\nexport default drawBinaryTree;\n","import CanvasComponent from './Canvas';\nimport drawBinaryTree from './drawBinaryTree';\n\nexport {\n  CanvasComponent,\n  drawBinaryTree,\n};\n","export * from './VisualizationType';\n","export * from './theme';\n","export * from './tree';\nexport * from './canvas';\nexport * from './enumns';\nexport * from './config';\n","import { BinaryTreeNode, drawBinaryTree, VisualizationType, setTheme } from 'binary-tree-visualizer';\r\nlet opt = {\r\n    textFont:100,\r\n    strokeColor:'green',\r\n    borderStyle:'dotted',\r\n    colorArray: [{\r\n        borderColor: 'green',\r\n        bgColor: \"white\"\r\n    }]\r\n};\r\nsetTheme(opt);\r\nconst insertBtn = document.querySelector(\"button\");\r\ninsertBtn.addEventListener(\"click\", ()=>{\r\n    if(root.value==\" \"){\r\n        root = new BinaryTreeNode(parseInt(document.getElementById(\"element\").value));\r\n        draw();\r\n    }\r\n    else{\r\n        insert(root,parseInt(document.getElementById(\"element\").value));\r\n        draw();\r\n    }\r\n})\r\nfunction insert(node, value){\r\n    if(node.value==value)\r\n        return;\r\n    if(value<node.value){\r\n        if(node.left!=undefined){\r\n            insert(node.left,value);\r\n            return;\r\n        }\r\n        node.setLeft(new BinaryTreeNode(value));\r\n        return;\r\n    }\r\n        if(node.right!=undefined){\r\n            insert(node.right,value);\r\n            return;\r\n        }\r\n        node.setRight(new BinaryTreeNode(value));\r\n}\r\n\r\nfunction deleteNode(node, value) {\r\n    if (node == undefined) return node;\r\n    if (value < node.value) {\r\n        node.left = deleteNode(node.left, value);\r\n    } else if (value > node.value) {\r\n        node.right = deleteNode(node.right, value);\r\n    } else {\r\n        if (node.left == undefined) return node.right;\r\n        else if (node.right == undefined) return node.left;\r\n        \r\n        node.value = minValue(node.right);\r\n        node.right = deleteNode(node.right, node.value);\r\n    }\r\n    return node;\r\n}\r\n\r\nfunction minValue(node) {\r\n    let minv = node.value;\r\n    while (node.left != undefined) {\r\n        minv = node.left.value;\r\n        node = node.left;\r\n    }\r\n    return minv;\r\n}\r\n\r\nfunction maxValue(node) {\r\n    let maxv = node.value;\r\n    while (node.right != undefined) {\r\n        maxv = node.right.value;\r\n        node = node.right;\r\n    }\r\n    return maxv;\r\n}\r\n\r\n// New searchNode function\r\nfunction searchNode(node, value) {\r\n    if (node == undefined || node.value == value) return node;\r\n    if (value < node.value) return searchNode(node.left, value);\r\n    return searchNode(node.right, value);\r\n}\r\n\r\nlet preorderArray = [];\r\nfunction preorder(node, temp){\r\n    if(node!=undefined){\r\n        preorderArray.push(node.value);\r\n        preorder(node.left,1);\r\n        preorder(node.right,0);\r\n    }\r\n}\r\nlet inorderArray = [];\r\nfunction inorder(node,temp){\r\n    if(node!=undefined){\r\n        inorder(node.left,1);\r\n        inorderArray.push(node.value);\r\n        inorder(node.right,0);\r\n    }\r\n}\r\nlet postorderArray = [] ;\r\nfunction postorder(node, temp){\r\n    if(node!=undefined){\r\n        postorder(node.left,1);\r\n        postorder(node.right,0);\r\n        postorderArray.push(node.value);\r\n    }\r\n}\r\nconst preorderBtn = document.getElementById(\"preorderBtn\");\r\nconst inorderBtn = document.getElementById(\"inorderBtn\");\r\nconst postorderBtn = document.getElementById(\"postorderBtn\");\r\n\r\nconst deleteBtn = document.querySelectorAll(\"button\")[1];\r\ndeleteBtn.addEventListener(\"click\", () => {\r\n    const value = parseInt(document.getElementById(\"element\").value);\r\n    if (isNaN(value)) return;\r\n    root = deleteNode(root, value);\r\n    draw();\r\n});\r\n\r\nconst searchBtn = document.querySelectorAll(\"button\")[2];\r\nsearchBtn.addEventListener(\"click\", () => {\r\n    const value = parseInt(document.getElementById(\"element\").value);\r\n    if (isNaN(value)) return;\r\n    const result = searchNode(root, value);\r\n    const outputElement = document.getElementById(\"output_2\");\r\n    if (outputElement != undefined)\r\n        outputElement.remove();\r\n    const output_2 = document.createElement(\"h2\");\r\n    output_2.setAttribute(\"id\", \"output_2\");\r\n    let textnode = document.createTextNode(result ? `Node with value ${value} found.` : `Node with value ${value} not found.`);\r\n    output_2.appendChild(textnode);\r\n    document.getElementById(\"output\").appendChild(output_2);\r\n});\r\n\r\npreorderBtn.addEventListener(\"click\",()=>{\r\n    preorderArray = [];\r\n    preorder(root,-1);\r\n    const element = document.getElementById(\"output_1\");\r\n    if(element!=undefined)\r\n        element.remove();\r\n    const output_1 = document.createElement(\"h2\");\r\n    output_1.setAttribute(\"id\",\"output_1\");\r\n    let textnode = document.createTextNode(\"Preorder: [\");\r\n    output_1.appendChild(textnode); \r\n    textnode = document.createTextNode(preorderArray);\r\n    output_1.appendChild(textnode); \r\n    textnode = document.createTextNode(\"]\");\r\n    output_1.appendChild(textnode); \r\n    document.getElementById(\"output\").appendChild(output_1);\r\n});\r\n\r\ninorderBtn.addEventListener(\"click\",()=>{\r\n    inorderArray = [];\r\n    inorder(root,-1);\r\n    const element = document.getElementById(\"output_1\");\r\n    if(element!=undefined)\r\n        element.remove();\r\n    const output_1 = document.createElement(\"h2\");\r\n    output_1.setAttribute(\"id\",\"output_1\");\r\n    let textnode = document.createTextNode(\"Inorder: [\");\r\n    output_1.appendChild(textnode); \r\n    textnode = document.createTextNode(inorderArray);\r\n    output_1.appendChild(textnode); \r\n    textnode = document.createTextNode(\"]\");\r\n    output_1.appendChild(textnode); \r\n    document.getElementById(\"output\").appendChild(output_1);\r\n});\r\n\r\npostorderBtn.addEventListener(\"click\",()=>{\r\n    postorderArray = [];\r\n    postorder(root,-1);\r\n    const element = document.getElementById(\"output_1\");\r\n    if(element!=undefined)\r\n        element.remove();\r\n    const output_1 = document.createElement(\"h2\");\r\n    output_1.setAttribute(\"id\",\"output_1\");\r\n    let textnode = document.createTextNode(\"Postorder: [\");\r\n    output_1.appendChild(textnode); \r\n    textnode = document.createTextNode(postorderArray);\r\n    output_1.appendChild(textnode); \r\n    textnode = document.createTextNode(\"]\");\r\n    output_1.appendChild(textnode); \r\n    document.getElementById(\"output\").appendChild(output_1);\r\n});\r\nconst findMinBtn = document.getElementById(\"findMinBtn\");\r\nconst findMaxBtn = document.getElementById(\"findMaxBtn\");\r\nfindMinBtn.addEventListener(\"click\", () => {\r\n    const min = root.value !== \" \" ? minValue(root) : undefined;\r\n    const outputElement = document.getElementById(\"output_3\");\r\n    if (outputElement != undefined)\r\n        outputElement.remove();\r\n    const output_3 = document.createElement(\"h2\");\r\n    output_3.setAttribute(\"id\", \"output_3\");\r\n    let textnode = document.createTextNode(min !== undefined ? `Min value: ${min}` : `Tree is empty.`);\r\n    output_3.appendChild(textnode);\r\n    document.getElementById(\"output\").appendChild(output_3);\r\n});\r\n\r\nfindMaxBtn.addEventListener(\"click\", () => {\r\n    const max = root.value !== \" \" ? maxValue(root) : undefined;\r\n    const outputElement = document.getElementById(\"output_4\");\r\n    if (outputElement != undefined)\r\n        outputElement.remove();\r\n    const output_4 = document.createElement(\"h2\");\r\n    output_4.setAttribute(\"id\", \"output_4\");\r\n    let textnode = document.createTextNode(max !== undefined ? `Max value: ${max}` : `Tree is empty.`);\r\n    output_4.appendChild(textnode);\r\n    document.getElementById(\"output\").appendChild(output_4);\r\n})\r\n\r\nconst resetBtn = document.getElementById(\"resetBtn\");\r\nresetBtn.addEventListener(\"click\", () => {\r\n    root = new BinaryTreeNode(\" \");\r\n    draw();\r\n    const outputElements = document.querySelectorAll('#output h2');\r\n    outputElements.forEach(element => element.remove());\r\n});\r\nfunction draw(){\r\n    drawBinaryTree(root,document.querySelector(\"canvas\"),{type:VisualizationType.HIGHLIGHT});\r\n}\r\nlet root = new BinaryTreeNode(\" \");\r\ndraw();"]}